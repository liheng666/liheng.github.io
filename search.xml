<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>记mysql语句执行堵塞排查</title>
      <link href="/2020/08/25/%E8%AE%B0mysql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%A0%B5%E5%A1%9E%E6%8E%92%E6%9F%A5/"/>
      <url>/2020/08/25/%E8%AE%B0mysql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%A0%B5%E5%A1%9E%E6%8E%92%E6%9F%A5/</url>
      <content type="html"><![CDATA[<h2 id="先说原因"><a href="#先说原因" class="headerlink" title="先说原因"></a>先说原因</h2><p>测试环境的binlog 没有自动删除，导致磁盘占满，请求的 sql全都堵塞，事务锁又进一步影响到后续的事务，报<code>Lock wait timeout exceeded</code>,大部分事务state 都是 commit、starting、query。):</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><ol><li>日志报错 <code>Lock wait timeout exceeded</code><br>首先想到是事务死锁了使用<code>SELECT * FROM information_schema.INNODB_TRX;</code>查看正在执行的事务，发现全是state状态大部分都是 commit、starting、query，而不是锁等待状态，并且执行很长时间了。然后<code>show processlist</code> 查看线程，也是发现大量的线程，基本一个事务对应一个线程，全都堵塞在那。很奇怪，没死锁又全在等待。 没思路了。。。 先把线程都kill掉，测试下正常了，然后又会慢慢出现等待的事务。</li><li>求助搜索引擎，有种可能是 数据盘写满了所以都在等待，<code>du -f</code>果然是磁盘满了，然后就发现是binlog没自动删除，占满了磁盘，清除部分binlog后，正常了。</li><li><code>/etc/my.cnf</code> 设置 <code>expire_logs_days = 15</code> 保留15天的。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> binlog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rust笔记1</title>
      <link href="/2019/10/17/rust%E7%AC%94%E8%AE%B01/"/>
      <url>/2019/10/17/rust%E7%AC%94%E8%AE%B01/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 Linux 或 macOS 上安装 rustup<br>如果你使用 Linux 或 macOS，打开终端并输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure><p>此命令下载一个脚本并开始安装 rustup 工具，这会安装最新稳定版 Rust。过程中可能会提示你输入密码。如果安装成功，将会出现如下内容：</p><blockquote><p>Rust is installed now. Great!</p></blockquote><p>要检查是否正确安装了 Rust，打开 shell 并运行如下行：</p><p><code>rustc --version</code></p><p>你应能看到已发布的最新稳定版的版本号、提交哈希和提交日期，显示为如下格式：</p><blockquote><p>rustc x.y.z (abcabcabc yyyy-mm-dd)</p></blockquote><h2 id="更新、删除"><a href="#更新、删除" class="headerlink" title="更新、删除"></a>更新、删除</h2><p>更新和卸载<br>通过 rustup 安装了 Rust 之后，很容易更新到最新版本。在 shell 中运行如下更新脚本：</p><p><code>rustup update</code></p><p>为了卸载 Rust 和 rustup，在 shell 中运行如下卸载脚本:</p><p><code>rustup self uninstall</code></p><h2 id="hello-rust"><a href="#hello-rust" class="headerlink" title="hello rust"></a>hello rust</h2><p>创建文件<code>main.rs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn main()&#123;</span><br><span class="line">    println!(&quot;hello, rust&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：<code>rustc main.rs</code></p><p>运行：<code>./main</code></p><p>看到终端打印出来:</p><blockquote><p>Hello, rust</p></blockquote><p>恭喜你成功了！！！</p><h2 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h2><p>Cargo 是 Rust 的构建系统和包管理器。</p><p>可以在终端输入如下命令检查是否安装了 Cargo：</p><p><code>cargo --version</code></p><p>如果你看到了版本号，说明已安装！</p><h3 id="使用-Cargo-创建项目"><a href="#使用-Cargo-创建项目" class="headerlink" title="使用 Cargo 创建项目"></a>使用 Cargo 创建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello_cargo</span><br><span class="line">cd hello_cargo</span><br></pre></td></tr></table></figure><h3 id="Cargo编译项目"><a href="#Cargo编译项目" class="headerlink" title="Cargo编译项目"></a>Cargo编译项目</h3><p>可以使用 <code>cargo build</code> 或 <code>cargo check</code> 构建项目。<br>可以使用 <code>cargo run</code> 一步构建并运行项目。<br>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 <strong>target/debug</strong> 目录。</p><h3 id="发布（release）构建"><a href="#发布（release）构建" class="headerlink" title="发布（release）构建"></a>发布（release）构建</h3><p>当项目最终准备好发布时，可以使用 cargo build –release 来优化编译项目。这会在 target/release 而不是 target/debug 下生成可执行文件。</p>]]></content>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7用户最大进程限制导致的问题排查</title>
      <link href="/2019/07/24/centos7%E7%94%A8%E6%88%B7%E6%9C%80%E5%A4%A7%E8%BF%9B%E7%A8%8B%E9%99%90%E5%88%B6%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
      <url>/2019/07/24/centos7%E7%94%A8%E6%88%B7%E6%9C%80%E5%A4%A7%E8%BF%9B%E7%A8%8B%E9%99%90%E5%88%B6%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
      <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><blockquote><p>/etc/security/limits.d/90-nproc.conf 与 /etc/security/limits.conf 都是系统用户资源配置文件</p></blockquote><p>/etc/security/limits.conf 配置文件可限制文件打开数，系统进程等资源，在该文件配置中写的最大用户进程数是受/etc/security/limits.d/90-nproc.conf配置上限影响的。</p><blockquote></blockquote><p>一般系统普通用户进程数满了都是修改/etc/security/limits.d/90-nproc.conf文件。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><h3 id="服务器报错"><a href="#服务器报错" class="headerlink" title="服务器报错"></a>服务器报错</h3><blockquote><p> ErrorException: proc_open(): fork failed - Resource temporarily unavailable </p></blockquote><p>首先查看资源使用情况</p><ul><li><code>top</code>查看服务器资源大概使用情况，cpu、内存 正常。</li><li><code>ps -ef|wc -l</code>进一步查看当前用户下的进程数量在<b>1024</b> 左右</li></ul><p>初步判断是用户最大进程数限制</p><ul><li><code>ulimit -a</code> 查看用户最大进程配置 是 31207</li></ul><blockquote><p>max user processes              (-u) 31207</p></blockquote><p>很迷惑 ！？？明明数量没限制为什么进程一直在1024左右。</p><ul><li>google 查询相关问题</li></ul><p>最终发现 </p><blockquote><p>/etc/security/limits.conf 配置文件可限制文件打开数，系统进程等资源，在该文件配置中写的最大用户进程数是受/etc/security/limits.d/90-nproc.conf配置上限影响的。</p></blockquote><p>修改<code>/etc/security/limits.d/90-nproc.conf</code>文件为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*          soft    nproc     10240</span><br><span class="line">root       soft    nproc     unlimited</span><br></pre></td></tr></table></figure><p><b>解决问题</b></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 最大进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7安装php7.3.6记录</title>
      <link href="/2019/07/02/centos7%E5%AE%89%E8%A3%85php7-3-6%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/07/02/centos7%E5%AE%89%E8%A3%85php7-3-6%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>./configure  –prefix=/opt/software/php-7.3.6 –sysconfdir=/opt/software/php-7.3.6/etc –with-config-file-scan-dir=/opt/software/php-7.3.6/etc/ini –enable-fpm –with-fpm-user= –with-fpm-group= –enable-mysqlnd –with-mysqli=mysqlnd –with-pdo-mysql=mysqlnd –enable-mysqlnd-compression-support –with-iconv-dir –with-freetype-dir –with-jpeg-dir –with-png-dir –with-zlib –with-zlib-dir –enable-libxml –with-libxml-dir –enable-xml –disable-rpath –enable-bcmath –enable-shmop –enable-sysvsem –enable-inline-optimization –with-curl –enable-mbregex –enable-mbstring –enable-intl –enable-ftp –with-gd –enable-gd-jis-conv –with-openssl –with-mhash –enable-pcntl –enable-sockets –with-xmlrpc –enable-zip –enable-soap –with-gettext –disable-fileinfo –enable-opcache=no –with-pear –enable-maintainer-zts –with-ldap=shared –enable-pdo –enable-sysvshm –with-xpm-dir –enable-session –enable-ctype –without-gdbm</p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><blockquote><p>configure: error: Please reinstall the libzip distribution</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#下载编译安装</span><br><span class="line">wget https://nih.at/libzip/libzip-1.2.0.tar.gz</span><br><span class="line">tar -zxvf libzip-1.2.0.tar.gz</span><br><span class="line">cd libzip-1.2.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="报错-1"><a href="#报错-1" class="headerlink" title="报错"></a>报错</h3><p>configure: error: off_t undefined; check your library configuration</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#添加搜索路径到配置文件</span><br><span class="line">echo &apos;/usr/local/lib64</span><br><span class="line">/usr/local/lib</span><br><span class="line">/usr/lib</span><br><span class="line">/usr/lib64&apos;&gt;&gt;/etc/ld.so.conf</span><br><span class="line"></span><br><span class="line">#然后 更新配置</span><br><span class="line">ldconfig -v</span><br></pre></td></tr></table></figure><h3 id="make-ext-zip-php-zip-lo-错误-1"><a href="#make-ext-zip-php-zip-lo-错误-1" class="headerlink" title="make: *** [ext/zip/php_zip.lo] 错误 1"></a>make: *** [ext/zip/php_zip.lo] 错误 1</h3><p>cp /usr/local/lib/libzip/include/zipconf.h /usr/local/include/zipconf.h</p><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><p>cp php-fpm.conf.default php-fpm.conf<br>sudo cp ~/php-7.3.6/php.ini-production ./lib/php.ini</p><h3 id="扩展目录"><a href="#扩展目录" class="headerlink" title="扩展目录"></a>扩展目录</h3><p>/opt/software/php-7.3.6/lib/php/extensions/no-debug-zts-20180731/</p>]]></content>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>laravel-excel使用记录</title>
      <link href="/2019/06/18/laravel-excel%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/06/18/laravel-excel%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><p>ps: 解决过的问题记录下来，不能相信自己脑子的记忆力，很快就会忘记 😆</p><p>解决excel标题为汉字时，解析有问题；将<code>to_ascii</code>设置为<code>false</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">        |--------------------------------------------------------------------------</span><br><span class="line">        | Sheet heading conversion</span><br><span class="line">        |--------------------------------------------------------------------------</span><br><span class="line">        |</span><br><span class="line">        | Convert headings to ASCII 将标题转换为ASCII</span><br><span class="line">        | Note: only applies to &apos;heading&apos; settings &apos;true&apos; &amp;&amp; &apos;slugged&apos;</span><br><span class="line">        |</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        &apos;to_ascii&apos;                =&gt; false,</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次file_get_contents报错</title>
      <link href="/2019/05/16/%E8%AE%B0%E4%B8%80%E6%AC%A1file-get-contents%E6%8A%A5%E9%94%99/"/>
      <url>/2019/05/16/%E8%AE%B0%E4%B8%80%E6%AC%A1file-get-contents%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>php服务器报错：</p><p>ErrorException: file_get_contents(): SSL operation failed with code 1. OpenSSL Error messages:<br>error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>查看<code>file_get_contents</code>函数文档发现警告⚠️</p><blockquote><p>Warning<br>使用 SSL 时，Microsoft IIS 会违反协议不发送close_notify标记就关闭连接。PHP 会在到达数据尾端时报告“SSL: Fatal Protocol Error”。 要解决此问题，error_reporting 应设定为降低级别至不包含警告。 PHP 4.3.7 及更高版本可以在使用 https:// 包装器打开流时检测出有问题的 IIS 服务器软件 并抑制警告。在使用 fsockopen() 创建 ssl:// 套接字时, 开发者需检测并抑制此警告。</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>根据文档说明添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(E_ERROR | E_PARSE);</span><br><span class="line">$filePath = file_get_contents($image);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> Microsoft IIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web服务中获取客户端ip</title>
      <link href="/2019/05/15/web%E6%9C%8D%E5%8A%A1%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AFip/"/>
      <url>/2019/05/15/web%E6%9C%8D%E5%8A%A1%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AFip/</url>
      <content type="html"><![CDATA[<h2 id="X-Forwarded-For"><a href="#X-Forwarded-For" class="headerlink" title="X-Forwarded-For"></a>X-Forwarded-For</h2><blockquote><p>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。 Squid 缓存代理服务器的开发人员最早引入了这一HTTP头字段，并由IETF在HTTP头字段标准化草案中正式提出。</p></blockquote><h3 id="相关-remote-addr"><a href="#相关-remote-addr" class="headerlink" title="相关 $remote_addr"></a>相关 $remote_addr</h3><blockquote><p>是nginx与客户端进行TCP连接过程中，获得的客户端真实地址. Remote Address 无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源 IP，无法建立 TCP 连接，更不会有后面的 HTTP 请求</p></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><blockquote><p>这一HTTP头一般格式如下:</p></blockquote><p>X-Forwarded-For: client1, proxy1, proxy2, proxy3</p><blockquote><p>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边(client1)是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址【remote_addr】添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3(proxy3可能是请求的终点)。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。</p></blockquote><p>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.使用nginx进行反向代理的时候设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure><p>这样ngixn会将请求来源IP<code>remote_addr</code>追加到<code>X-Forwarded-For</code>并用（, + 空格）隔开 。请求header中不存在X-Forwarded-For    则是<code>remote_addr</code></p><p>2.在最前端的转发代理服务器中设置X-Forwarded-For,后端服务器程序从中获取客户端IP时,<strong>从后向前（防止伪造代理的IP）</strong>取X-Forwarded-For中最前端代理IP之前一个IP就是客户端的IP（和最前端代理进行tcp连接的真实IP）【如果使用了cdn，cdn的IP就是最前端IP】【如果没有使用代理服务器转发，直接使用<code>remote_addr</code>就可以】</p><h2 id="nginx-proxy-pass和fastcgi-pass-的区别"><a href="#nginx-proxy-pass和fastcgi-pass-的区别" class="headerlink" title="nginx proxy_pass和fastcgi_pass 的区别"></a>nginx proxy_pass和fastcgi_pass 的区别</h2><p>proxy_pass是反向代理模块。</p><p>fastcgi_pass是转发给 factcgi 后端处理。这种方式nginx只是web服务器，应用程序获取的<code>remote_addr</code>IP，就是请求到nginx的真实IP</p><blockquote><p>FastCGI全称 快速通用网关接口（FastCommonGatewayInterface）。</p><p>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次(这是CGI最为人诟病的fork-and-execute 模式)。它还支持分布式的运算, 即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。</p></blockquote><p>FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p><p>php-fmp 就是FastCGI的实现。</p>]]></content>
      
      
        <tags>
            
            <tag> ngixn </tag>
            
            <tag> http </tag>
            
            <tag> xff </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql中rand函数使用</title>
      <link href="/2019/04/23/mysql%E4%B8%ADrand%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/23/mysql%E4%B8%ADrand%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>需求是：从数据库中随机取出符合条件的几条数据;</p><p>可使用下面来随机获取5条数据</p><p><code>select * from table order by rand() limit 5</code> </p><p>需要注意： 这种方式只适合本身数据比较少或者通过where条件符约束后数据量很少的情况下使用，因为<code>order by rand()</code>会整体排序，数据量比较大的时候速度很慢。</p><blockquote><p>经测试在50W条数据中随机取需要十几秒的时间。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> rand() </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>elk日志监控搭建</title>
      <link href="/2019/02/20/elk%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/02/20/elk%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="elk日志监控搭建"><a href="#elk日志监控搭建" class="headerlink" title="elk日志监控搭建"></a>elk日志监控搭建</h1><blockquote><p>centos7系统</p></blockquote><h2 id="1-检查系统是否已安装java环境：java-version"><a href="#1-检查系统是否已安装java环境：java-version" class="headerlink" title="1. 检查系统是否已安装java环境：java -version"></a>1. 检查系统是否已安装java环境：<code>java -version</code></h2><h2 id="2-elk官网下载解压"><a href="#2-elk官网下载解压" class="headerlink" title="2. elk官网下载解压"></a>2. <a href="https://www.elastic.co" target="_blank" rel="noopener">elk官网</a>下载解压</h2><h2 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h2><ol><li>使用默认配置启动es <code>./bin/elasticsearch &amp;</code> 测试是否启动成功 <code>curl &#39;http://localhost:9200/?pretty&#39;</code></li><li>配置 logstash，在config目录下穿件conf.d文件夹用来存放配置文件，启动 <code>./bin/logstash --path.settings ./config/ -f ./config/conf.d &amp;</code></li><li>配置 filebeat 目录下的filebeat.yml文件，启动<code>nohup ./filebeat -e -c filebeat.yml &gt;/dev/null 2&gt;&amp;1 &amp;</code></li><li>kibana 启动<code>./bin/kibana &amp;</code></li><li>使用nginx对kibana反向代理、添加登录限制。</li></ol><h2 id="监控报警-kibana插件sentinl"><a href="#监控报警-kibana插件sentinl" class="headerlink" title="监控报警 kibana插件sentinl"></a>监控报警 kibana插件sentinl</h2><p>现在对应的sentinl版本<br>指定文件路径安装 <code>./kibana-plugin install file:///sentinl-v6.2.4.zip</code></p><h2 id="kibana-配置nginx授权登录"><a href="#kibana-配置nginx授权登录" class="headerlink" title="kibana 配置nginx授权登录"></a>kibana 配置nginx授权登录</h2><ul><li>安装密码生产工具 <code>yum install httpd-tools</code></li><li>生成密码文件 <code>sudo htpasswd -bc /opt/nginx/conf/htpasswd.kibana admin admin</code></li><li>配置nginx </li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">   listen 5602;</span><br><span class="line">   server_name youname;       #主机名</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">       proxy_pass http://localhost:5601;</span><br><span class="line">       auth_basic &quot;Basic Authentication&quot;;</span><br><span class="line">       auth_basic_user_file &quot;/path/htpasswd.kibana&quot;; #密码文件位置</span><br><span class="line">       proxy_http_version 1.1;</span><br><span class="line">       proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">       proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_cache_bypass $http_upgrade;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> elk </tag>
            
            <tag> sentinl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Supervisor使用笔记</title>
      <link href="/2018/12/12/Supervisor%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/12/12/Supervisor%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Supervisor使用笔记"><a href="#Supervisor使用笔记" class="headerlink" title="Supervisor使用笔记"></a>Supervisor使用笔记</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> centos系统，使用root账户</p><ul><li>安装 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><ul><li>生成配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure><ul><li>创建目录, 并引入目录配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/supervisor/conf.d</span><br></pre></td></tr></table></figure><ul><li>编辑/etc/supervisord.conf, 修改文件末尾的[include]下的files字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>配置需要监听的队列, 创建配置文件/etc/supervisor/conf.d/queue.conf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:laravel-d3ingo] ;名称</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d   ;自定义多进程名称</span><br><span class="line">command=php /opt/project/d3ingo-tool/artisan queue:work --queue=d3ingo --sleep=3 --tries=3 ;启动命令</span><br><span class="line">autostart=true   ;自动开启</span><br><span class="line">autorestart=true ;自动重启</span><br><span class="line">user=root        </span><br><span class="line">numprocs=2      ;进程数量</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/etc/supervisor/logs/d3ingo.log  ;日志路径（必须提前创建好，不会自动创建）</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br><span class="line">supervisorctl</span><br></pre></td></tr></table></figure><p>进入supervisorctl控制台 <code>start all</code></p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supervisor </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>libreoffice把文档转换成PDF</title>
      <link href="/2018/11/14/libreoffice%E6%8A%8A%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2%E6%88%90PDF/"/>
      <url>/2018/11/14/libreoffice%E6%8A%8A%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2%E6%88%90PDF/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libreoffice</span><br><span class="line">yum install libreoffice-headless</span><br></pre></td></tr></table></figure><h3 id="php-fpm-调用"><a href="#php-fpm-调用" class="headerlink" title="php-fpm 调用"></a>php-fpm 调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// $path 目标路径、name_fix 源文件路径</span><br><span class="line"> $shell_str = &quot;export HOME=/tmp/ &amp;&amp; /usr/bin/libreoffice  --invisible --convert-to pdf --outdir $path $name_fix&quot;;</span><br><span class="line"> $result_str = exec($shell_str, $output, $return_var);</span><br></pre></td></tr></table></figure><h3 id="可能出现转PDF之后-中文出现编程小方框"><a href="#可能出现转PDF之后-中文出现编程小方框" class="headerlink" title="可能出现转PDF之后 中文出现编程小方框"></a>可能出现转PDF之后 中文出现编程小方框</h3><p>拷贝中文常用字体放入 linux系统字体中</p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> linux </tag>
            
            <tag> libreoffice </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>go 协程池实现</title>
      <link href="/2018/04/02/go-e5-8d-8f-e7-a8-8b-e6-b1-a0-e5-ae-9e-e7-8e-b0/"/>
      <url>/2018/04/02/go-e5-8d-8f-e7-a8-8b-e6-b1-a0-e5-ae-9e-e7-8e-b0/</url>
      <content type="html"><![CDATA[<h1 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h1><pre><code>package workimport &quot;sync&quot;// 协程工作池接口，使用工作池的work必须实现该接口type Worker interface {    Task()}// 工作池结构，work为无缓存管道，wg控制纤程执行完成type Pool struct {    work chan Worker    wg   sync.WaitGroup}// 创建一个指定纤程的worker池func New(maxGoroutines int) *Pool {    p := &amp;amp;Pool{        work: make(chan Worker), // 初始化无缓存通道，用来存储work    }    p.wg.Add(maxGoroutines)    for i := 0; i &amp;lt; maxGoroutines; i++ {        go func() {            for w := range p.work { // 使用range从通道中取work，当通道中没有值时堵塞，通道关闭时循环结束                w.Task()            }            p.wg.Done()        }()    }    return p}// 运行一个workerfunc (p *Pool) Run(w Worker) {    p.work &amp;lt;- w // 向通道中写入worker,如有空闲纤程将运行，如暂无空闲纤程将堵塞}// 关闭worker池func (p *Pool) Shutdown() {    close(p.work) // 关闭通道，各纤程执行完当前任务各自退出    p.wg.Wait()   // 等待所有纤程运行完毕}</code></pre>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>go pool资源池</title>
      <link href="/2018/03/25/go-pool-e8-b5-84-e6-ba-90-e6-b1-a0/"/>
      <url>/2018/03/25/go-pool-e8-b5-84-e6-ba-90-e6-b1-a0/</url>
      <content type="html"><![CDATA[<h1 id="资源池实现"><a href="#资源池实现" class="headerlink" title="资源池实现"></a>资源池实现</h1><pre><code>package poolimport (    &quot;sync&quot;    &quot;io&quot;    &quot;errors&quot;    &quot;log&quot;)type Pool struct {    m         sync.Mutex    resources chan io.Closer    factory   func() (io.Closer, error)    closed    bool}// 资源池已关闭错误提示var ErrPoolClosed = errors.New(&quot;pool has been closed&quot;)func New(fn func() (io.Closer, error), size uint) (*Pool, error) {    if size &amp;lt;= 0 {        return nil, errors.New(&quot;pool size too small&quot;)    }    return &amp;amp;Pool{        resources: make(chan io.Closer, size),        factory:   fn,    }, nil}// 获取一个资源func (p *Pool) Acquire() (resource io.Closer, err error) {    select {    case r, ok := &amp;lt;-p.resources:        log.Println(&quot;Acquire:&quot;, &quot;shared resource&quot;)        if !ok {            return nil, ErrPoolClosed        }        return r, nil    default:        log.Println(&quot;Acquire:&quot;, &quot;new resource&quot;)        return p.factory()    }}// 释放资源回池func (p *Pool) Release(r io.Closer) {    p.m.Lock()    defer p.m.Unlock()    if p.closed {        r.Close()        return    }    select {    case p.resources &amp;lt;- r:        log.Println(&quot;Release:&quot;, &quot;in queue&quot;)    default:        log.Println(&quot;Release:&quot;, &quot;closeing&quot;)        r.Close()    }}// 关闭资源池func (p *Pool) Close() {    p.m.Lock()    defer p.m.Unlock()    if p.closed {        return    }    p.closed = true    close(p.resources)    for r := range p.resources {        r.Close()    }}`&lt;/pre&gt;# 测试&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`package mainimport (    &quot;log&quot;    &quot;io&quot;    &quot;sync/atomic&quot;    &quot;mypackages/pool&quot;    &quot;sync&quot;    &quot;time&quot;    &quot;math/rand&quot;)const (    maxGoroutines = 200 // 最大协程数    poolResources = 10  //资源池资源数)type dbConn struct {    ID int32}func (d *dbConn) Close() error {    log.Println(&quot;close connection:&quot;, d.ID)    return nil}var resourceInt int32// 创建连接工厂函数func createConnection() (io.Closer, error) {    id := atomic.AddInt32(&amp;amp;resourceInt, 1) // 原子方法    log.Println(&quot;createConn:id=&quot;, id)    return &amp;amp;dbConn{        ID: atomic.AddInt32(&amp;amp;id, 1),    }, nil}func main() {    var wg sync.WaitGroup    wg.Add(maxGoroutines)    p, err := pool.New(createConnection, poolResources)    if err != nil {        log.Fatalln(err)    }    for query := 0; query &amp;lt; maxGoroutines; query++ {        go func(q int) {            selectQuery(q, p)            wg.Done()        }(query)    }    wg.Wait()    log.Println(&quot;close pool&quot;)    p.Close()}func selectQuery(q int, pool2 *pool.Pool) {    time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000)))    dbconn, err := pool2.Acquire()    if err != nil {        log.Println(&quot;acquire conn error:&quot;, err)    }    defer pool2.Release(dbconn)    time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000)))    log.Printf(&quot;Qin:%d.Cin%d&quot;, q, dbconn.(*dbConn).ID)}</code></pre>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>go  通道实现超时控制、接收系统退出</title>
      <link href="/2018/03/19/go-e9-80-9a-e9-81-93-e5-ae-9e-e7-8e-b0-e8-b6-85-e6-97-b6-e6-8e-a7-e5-88-b6-e3-80-81-e6-8e-a5-e6-94-b6-e7-b3-bb-e7-bb-9f-e9-80-80-e5-87-ba/"/>
      <url>/2018/03/19/go-e9-80-9a-e9-81-93-e5-ae-9e-e7-8e-b0-e8-b6-85-e6-97-b6-e6-8e-a7-e5-88-b6-e3-80-81-e6-8e-a5-e6-94-b6-e7-b3-bb-e7-bb-9f-e9-80-80-e5-87-ba/</url>
      <content type="html"><![CDATA[<pre><code>package mainimport (    &quot;os&quot;    &quot;time&quot;    &quot;errors&quot;    &quot;os/signal&quot;    &quot;log&quot;)type Runner struct {    interrupt chan os.Signal   //操作系统信号    complete  chan error       // 运行完成时返回信息    timeout   &amp;lt;-chan time.Time // 超时单向通道    tasks     []func(int)      // 存储方法切片}//超时返回信息var ErrTimeout = errors.New(&quot;received timeout&quot;)//系统中终止返回信息var ErrInterrupt = errors.New(&quot;received Interrupt&quot;)//Runner生成方法// os.Signal 系统信息接口// func After(d Duration) &amp;lt;-chan Time After会在另一线程经过时间段d后向返回值发送当时的时间func New(d time.Duration) *Runner {    return &amp;amp;Runner{        interrupt: make(chan os.Signal, 1),        complete:  make(chan error),        timeout:   time.After(d),    }}//向runner中添加需要运行的方法func (r *Runner) Add(tasks ...func(int)) {    r.tasks = append(r.tasks, tasks...)}//执行添加的每一个任务func (r *Runner) run() error {    for id, task := range r.tasks {        if r.gotInterrupt() {            return ErrInterrupt        }        task(id)    }    return nil}//验证是否收到系统中断信号func (r *Runner) gotInterrupt() bool {    select {    case &amp;lt;-r.interrupt:        signal.Stop(r.interrupt)        return true    default:        return false    }}// 执行所有任务，监听通道// func Notify(c chan&amp;lt;- os.Signal, sig ...os.Signal)// Notify函数让signal包将输入信号转发到c。如果没有列出要传递的信号，会将所有输入信号传递到c；否则只传递列出的输入信号。func (r *Runner) Start() error {    signal.Notify(r.interrupt, os.Interrupt)    go func() {        r.complete &amp;lt;- r.run()    }()    select {    case err := &amp;lt;-r.complete:        return err    case &amp;lt;-r.timeout:        return ErrTimeout    }}const timeout = 3 * time.Secondfunc main() {    log.Println(&quot;starting work&quot;)    r := New(timeout)    r.Add(createWork(), createWork(), createWork(), createWork(), createWork(), createWork())    if err := r.Start(); err != nil {        switch err {        case ErrInterrupt:            log.Println(&quot;Terminating due to interrupt&quot;)            os.Exit(1)        case ErrTimeout:            log.Println(&quot;Terminating due to timeout&quot;)            os.Exit(2)        }    }    log.Println(&quot;run end!&quot;)}func createWork() func(int) {    return func(d int) {        log.Printf(&quot;work: %d start&quot;, d)        time.Sleep(time.Duration(d) * time.Second)        log.Printf(&quot;work %d end&quot;, d)    }}</code></pre>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《算法》无向图--go语言实现</title>
      <link href="/2018/01/20/e5-9b-be-e7-9a-84-e6-b7-b1-e5-ba-a6-e4-bc-98-e5-85-88-e6-90-9c-e7-b4-a2-go-e8-af-ad-e8-a8-80-e5-ae-9e-e7-8e-b0/"/>
      <url>/2018/01/20/e5-9b-be-e7-9a-84-e6-b7-b1-e5-ba-a6-e4-bc-98-e5-85-88-e6-90-9c-e7-b4-a2-go-e8-af-ad-e8-a8-80-e5-ae-9e-e7-8e-b0/</url>
      <content type="html"><![CDATA[<h1 id="无向图–go语言实现（持续更新）"><a href="#无向图–go语言实现（持续更新）" class="headerlink" title="无向图–go语言实现（持续更新）"></a>无向图–go语言实现（持续更新）</h1><blockquote><p>在许多计算机应用中，由相连的结点所表示的模型起到了关键的作用。这些结点之间的连接很 自然地会让人们产生一连串的疑问:沿着这些连接能否从一个结点到达另一个结点?有多少个结点 和指定的结点相连?两个结点之间最短的连接是哪一条?<br>  要描述这些问题，我们要使用一种抽象的数学对象，叫做图<br>      摘自《算法》</p></blockquote><h4 id="图的数据结构和基本操作"><a href="#图的数据结构和基本操作" class="headerlink" title="图的数据结构和基本操作"></a>图的数据结构和基本操作</h4><pre><code>package graphimport (    &quot;container/list&quot;)// 图的数据结构type Graph struct {    v   int          // 顶点数    e   int          // 边数    adj []*list.List // 邻边链表切片}// 创建一个图func New(v int, e [][2]int) *Graph {    graph := new(Graph)    graph.v = v    graph.e = len(e)    var adj []*list.List    for i := 0; i &amp;lt; v; i++ {        adj = append(adj, list.New())    }    graph.adj = adj    for _, val := range e {        graph.AddEdge(val[0], val[1])    }    return graph}// 获取图的定点数量func (g *Graph) V() int {    return g.v}// 获取图中边的数量func (g *Graph) E() int {    return g.e}// 向图中添加一条边func (g *Graph) AddEdge(v int, w int) {    g.adj[v].PushFront(w)    g.adj[w].PushFront(v)}// 获取与顶点相通的其他顶点 返回一个链表func (g *Graph) Adj(v int) *list.List {    return g.adj[v]}`&lt;/pre&gt;#### 深度优先搜索&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`package graph/**深度优先搜索算法 */type depth struct {    marked []bool    count  int}func NewDepth(g *Graph, s int) *depth {    depth := &amp;amp;depth{        marked: make([]bool, g.v),        count:  0,    }    depth.dfs(g, s)    return depth}// 利用递归实现图深度优先搜索func (d *depth) dfs(g *Graph, v int) {    d.marked[v] = true    d.count++    for e := g.Adj(v).Front(); e != nil; e = e.Next() {        w, _ := e.Value.(int)        if !d.marked[w] {            d.dfs(g, w)        }    }}// 判断传入的顶点是否与初始顶点相通func (d *depth) Marked(w int) bool {    return d.marked[w]}// 和初始顶点相通的顶点数量func (d *depth) Count() int {    return d.count}`&lt;/pre&gt;#### 深度优先搜索路径&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`package graphtype Paths struct {    marked []bool    edgeTo []int    final  int}func NewPaths(graph *Graph, s int) *Paths {    paths := &amp;amp;Paths{        marked: make([]bool, graph.V()),        edgeTo: make([]int, graph.V()),        final:  s,    }    paths.dfs(graph, s)    return paths}func (p *Paths) dfs(graph *Graph, v int) {    p.marked[v] = true    for e := graph.Adj(v).Front(); e != nil; e = e.Next() {        w, _ := e.Value.(int)        if !p.marked[w] {            p.edgeTo[w] = v            p.dfs(graph, w)        }    }}func (p *Paths) HasPathTo(v int) bool {    return p.marked[v]}func (p *Paths) PathTo(v int) []int {    if !p.HasPathTo(v) {        return nil    }    path := make([]int, 0)    var x int    for x = v; x != p.final; x = p.edgeTo[x] {        path = append(path, x)    }    path = append(path, x)    return path}`&lt;/pre&gt;#### 广度优先搜索最短路径&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`package graphimport &quot;container/list&quot;/***广度优先搜索*/type Breadth struct {    marked []bool    edgeTo []int    final  int}func NewBreadth(graph *Graph, s int) *Breadth {    breadth := &amp;amp;Breadth{        marked: make([]bool, graph.v),        edgeTo: make([]int, graph.v),        final:  s,    }    breadth.bfs(graph, s)    return breadth}func (b *Breadth) bfs(graph *Graph, s int) {    queue := list.New()    b.marked[s] = true    queue.PushBack(s)    for queue.Len() != 0 {        element := queue.Front()        v, _ := queue.Remove(element).(int)        for e := graph.Adj(v).Front(); e != nil; e = e.Next() {            val, _ := e.Value.(int)            if b.marked[val] == false {                b.marked[val] = true                b.edgeTo[val] = v                queue.PushBack(e.Value)            }        }    }}func (b *Breadth) HasPathTo(v int) bool {    return b.marked[v]}func (b *Breadth) Path(v int) []int {    if !b.HasPathTo(v) {        return nil    }    path := make([]int, 0)    for p := v; p != b.final;p = b.edgeTo[p] {        path = append(path,p)    }    path = append(path,b.final)    return path}`&lt;/pre&gt;#### 最后测试&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`package mainimport (    &quot;graph&quot;    &quot;fmt&quot;)func main() {    data := [][2]int{        {0, 1},        {1, 3},        {0, 3},    }    g := graph.New(4, data)    //depth := graph.NewDepth(g, 1)    //fmt.Println(depth.Marked(3))    //paths := graph.NewPaths(g, 0)    //fmt.Println(paths.PathTo(3))    paths := graph.NewBreadth(g, 0)    fmt.Println(paths.Path(3))}</code></pre>]]></content>
      
      <categories>
          
          <category> go </category>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS 时间格式化代码片段</title>
      <link href="/2017/12/28/js-e6-97-b6-e9-97-b4-e6-a0-bc-e5-bc-8f-e5-8c-96-e4-bb-a3-e7-a0-81-e7-89-87-e6-ae-b5/"/>
      <url>/2017/12/28/js-e6-97-b6-e9-97-b4-e6-a0-bc-e5-bc-8f-e5-8c-96-e4-bb-a3-e7-a0-81-e7-89-87-e6-ae-b5/</url>
      <content type="html"><![CDATA[<pre><code>Date.prototype.Format = function (fmt) {          var o = {            &quot;M+&quot;: this.getMonth() + 1, //月份             &quot;d+&quot;: this.getDate(), //日             &quot;h+&quot;: this.getHours(), //小时             &quot;m+&quot;: this.getMinutes(), //分             &quot;s+&quot;: this.getSeconds(), //秒             &quot;q+&quot;: Math.floor((this.getMonth() + 3) / 3), //季度             &quot;S&quot;: this.getMilliseconds() //毫秒         };        if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));        for (var k in o)        if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length)));        return fmt;    };</code></pre><p>使用示例：<br><code>new Date().Formet(&quot;yyyy-MM-dd&quot;)</code></p>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js时间格式化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发下的mysql问题</title>
      <link href="/2017/12/26/e9-ab-98-e5-b9-b6-e5-8f-91-e4-b8-8b-e7-9a-84mysql-e9-97-ae-e9-a2-98/"/>
      <url>/2017/12/26/e9-ab-98-e5-b9-b6-e5-8f-91-e4-b8-8b-e7-9a-84mysql-e9-97-ae-e9-a2-98/</url>
      <content type="html"><![CDATA[<h1 id="1-mysql-重复插入问题"><a href="#1-mysql-重复插入问题" class="headerlink" title="1 mysql 重复插入问题"></a>1 mysql 重复插入问题</h1><blockquote><p>业务需要先根据where条件查询，如有数据命中对其进行修改否则创建一条新的记录。实践中发现：该操作在遇到并发处理时会发生重复创建</p></blockquote><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>添加唯一索引或多列唯一索引，这样当有重复创建时数据库报错，交由程序处理。这种处理方式为乐观锁，适合冲突发生率比较低的情况。</p><h1 id="2-mysql-set-update-并发脏读问题"><a href="#2-mysql-set-update-并发脏读问题" class="headerlink" title="2 mysql set update 并发脏读问题"></a>2 mysql set update 并发脏读问题</h1><blockquote><p>对一条数据进行累加时常常先使用select语句查询，然后在查询的数值上加上一个数值，在update 更新回数据库。 这样操作在并发处理中会出现脏读问题，例如：两个进程同时处理相同一条数据，同时读取了当前的数值为200，进程1处理的比较快在2000的基础上加上了3000（2000 + 3000），更新回数据库（此时数据为5000），进程2也在原2000基础上加上了2000（2000 + 2000），也更新会数据库。最终数据库数值为4000，正确的应为2000+3000+2000=7000.</p></blockquote><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>对数据加独占锁：</p><p>共享锁（S）：SELECT * FROM table_name WHERE … LOCK IN SHARE MODE。</p><p>排他锁（X)：SELECT * FROM table_name WHERE … FOR UPDATE。</p><p>在这个问题中，我们采用排他锁对需要修改的数据加锁，这样在整个查询、修改的事务执行过程中，其他事务将无法读取数据，直到该事务处理完毕。这种操作方式为悲观锁。 将并行处理改为串行处理。</p><h4 id="SQLAlchemy-的-Query-支持-select-…-for-update-share"><a href="#SQLAlchemy-的-Query-支持-select-…-for-update-share" class="headerlink" title="SQLAlchemy 的 Query 支持 select … for update / share ."></a>SQLAlchemy 的 Query 支持 select … for update / share .</h4><pre><code>session.Query(User).with_for_update().first()session.Query(User).with_for_update(read=True).first()`&lt;/pre&gt;完整形式是:&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`with_for_update(read=False, nowait=False, of=None)</code></pre><blockquote><p>read</p><p>  是标识加互斥锁还是共享锁. 当为 True 时, 即 for share 的语句, 是共享锁. 多个事务可以获取共享锁, 互斥锁只能一个事务获取. 有”多个地方”都希望是”这段时间我获取的数据不能被修改, 我也不会改”, 那么只能使用共享锁.</p><p>  nowait</p><p>  其它事务碰到锁, 是否不等待直接”报错”.</p><p>  of</p><p>  指明上锁的表, 如果不指明, 则查询中涉及的所有表(行)都会加锁.</p></blockquote>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Laravel+scout+elasticsearch实现全文搜索</title>
      <link href="/2017/12/21/laravelscoutelasticsearch-e5-ae-9e-e7-8e-b0-e5-85-a8-e6-96-87-e6-90-9c-e7-b4-a2/"/>
      <url>/2017/12/21/laravelscoutelasticsearch-e5-ae-9e-e7-8e-b0-e5-85-a8-e6-96-87-e6-90-9c-e7-b4-a2/</url>
      <content type="html"><![CDATA[<h1 id="Laravel中使用elasticsearch实现全文搜索"><a href="#Laravel中使用elasticsearch实现全文搜索" class="headerlink" title="Laravel中使用elasticsearch实现全文搜索"></a>Laravel中使用elasticsearch实现全文搜索</h1><blockquote><p>项目中要做搜索,欲采用Laravel+Scout扩展 +elasticsearch来实现，特记录备用</p></blockquote><h2 id="elastic安装"><a href="#elastic安装" class="headerlink" title="elastic安装"></a>elastic安装</h2><ol><li>官网下载5.6.4版本zip文件，解压到目标目录，运行需要Java1.8运行环境。<p></p></li><li><p>安装分词扩展ik，在elasticsearch目录下执行命令</p><pre><code>./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.4/elasticsearch-analysis-ik-5.6.4.zip</code></pre><p>`</p></li><li>查看安装的扩展列表<pre class="line-numbers prism-highlight" data-start="1">`./bin/elasticsearch-plugin list`</pre></li><li>启动 <code>./bin/elasticsearch</code></li><li><p>本地访问 <code>http://localhost:9200/?pretty</code> 查看启动成功</p><h2 id="Laravel扩展"><a href="#Laravel扩展" class="headerlink" title="Laravel扩展"></a>Laravel扩展</h2><p></p><p>Laravel使用的5.4版本，使用官方Scout全文搜索扩展和针对Scout的elastic引擎laravel-scout-elastic,使用只需安装tamayo/laravel-scout-elastic，它会依赖下载Scout。</p><pre class="line-numbers prism-highlight" data-start="1">`composer require tamayo/laravel-scout-elastic`</pre><p>添加服务提供者</p><pre class="line-numbers prism-highlight" data-start="1">`// config/app.php'providers' =&gt; [    ...    Laravel\Scout\ScoutServiceProvider::class,    ...    ScoutEngines\Elasticsearch\ElasticsearchProvider::class,],`</pre><p>生成scout配置</p><pre class="line-numbers prism-highlight" data-start="1">`php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider"`</pre><p>添加Elastic引擎配置</p><p><pre class="line-numbers prism-highlight" data-start="1">`// config/scout.php<br>// Set your driver to elasticsearch</pre></p><pre><code>&apos;driver&apos; =&amp;gt; env(&apos;SCOUT_DRIVER&apos;, &apos;elasticsearch&apos;),// Elastic引擎配置&apos;elasticsearch&apos; =&amp;gt; [        //elastic索引名称    &apos;index&apos; =&amp;gt; env(&apos;ELASTICSEARCH_INDEX&apos;, &apos;laravel&apos;),    // elastic 访问地址    &apos;hosts&apos; =&amp;gt; [        env(&apos;ELASTICSEARCH_HOST&apos;, &apos;http://localhost&apos;),    ],],</code></pre></li></ol><p>至此前期准备配置就算完成了</p><h2 id="Scout使用"><a href="#Scout使用" class="headerlink" title="Scout使用"></a>Scout使用</h2><p>具体Scout扩展的使用可查询<a href="https://d.laravel-china.org/docs/5.4/scout#pagination" target="_blank" rel="noopener">文档</a></p>]]></content>
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> scout </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>go 标准库log使用</title>
      <link href="/2017/12/17/go-e6-a0-87-e5-87-86-e5-ba-93log-e4-bd-bf-e7-94-a8/"/>
      <url>/2017/12/17/go-e6-a0-87-e5-87-86-e5-ba-93log-e4-bd-bf-e7-94-a8/</url>
      <content type="html"><![CDATA[<pre><code>package mainimport (    &quot;log&quot;    &quot;os&quot;    &quot;io/ioutil&quot;    &quot;io&quot;)var (    Trace   *log.Logger    Info    *log.Logger    Warning *log.Logger    Error   *log.Logger)func init() {    file, err := os.OpenFile(&quot;error.txt&quot;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)    if err != nil {        log.Fatalln(&quot;Fatal to open error log file:&quot;, err)    }    Trace = log.New(ioutil.Discard,        &quot;Trace: &quot;,        log.Ldate|log.Ltime|log.Lshortfile)    Info = log.New(os.Stdout,        &quot;Info: &quot;,        log.Ldate|log.Ltime|log.Lshortfile)    Warning = log.New(os.Stdout,        &quot;Warning: &quot;,        log.Ldate|log.Ltime|log.Lshortfile)    Error = log.New(io.MultiWriter(file, os.Stderr),        &quot;Error: &quot;,        log.Ldate|log.Ltime|log.Lshortfile)}func main() {    Trace.Println(&quot;this is  Trace&quot;)    Info.Println(&quot;this is Info&quot;)    Warning.Println(&quot;this is Warning&quot;)    Error.Println(&quot;this is Errer&quot;)}</code></pre>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>explain 详细参数</title>
      <link href="/2017/10/21/explain-e8-af-a6-e7-bb-86-e5-8f-82-e6-95-b0/"/>
      <url>/2017/10/21/explain-e8-af-a6-e7-bb-86-e5-8f-82-e6-95-b0/</url>
      <content type="html"><![CDATA[<blockquote><p>平时分析sql语句经常使用explain 查看执行情况，一些细节特详细记录用以备忘。</p></blockquote><p>发现简书有篇总结的很详细，偷个懒 😁<br><a href="http://www.jianshu.com/p/ea3fc71fdc45" target="_blank" rel="noopener">这是链接</a></p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> explain </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序算法（插入排序、希尔排序、堆排序、归并排序、快速排序）</title>
      <link href="/2017/09/26/e6-8e-92-e5-ba-8f-e7-ae-97-e6-b3-95-ef-bc-88-e6-8f-92-e5-85-a5-e6-8e-92-e5-ba-8f-e3-80-81-e5-b8-8c-e5-b0-94-e6-8e-92-e5-ba-8f-e3-80-81-e5-a0-86-e6-8e-92-e5-ba-8f-e3-80-81-e5-bd-92-e5-b9-b6-e6-8e-92/"/>
      <url>/2017/09/26/e6-8e-92-e5-ba-8f-e7-ae-97-e6-b3-95-ef-bc-88-e6-8f-92-e5-85-a5-e6-8e-92-e5-ba-8f-e3-80-81-e5-b8-8c-e5-b0-94-e6-8e-92-e5-ba-8f-e3-80-81-e5-a0-86-e6-8e-92-e5-ba-8f-e3-80-81-e5-bd-92-e5-b9-b6-e6-8e-92/</url>
      <content type="html"><![CDATA[<h3 id="插入排序、希尔排序、堆排序、归并排序-–c语言实现"><a href="#插入排序、希尔排序、堆排序、归并排序-–c语言实现" class="headerlink" title="插入排序、希尔排序、堆排序、归并排序 –c语言实现"></a>插入排序、希尔排序、堆排序、归并排序 –c语言实现</h3><p>逐渐添加中….</p><pre><code>#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#define LeftChild(i) (2 * (i) + 1)#define FatalError(str) fprintf(stderr, &quot;%s\n&quot;, str), exit(1);void IntertionSort(int data[], int n);void ShellSort(int data[], int n);void HeapSort(int data[], int n);void PercDown(int data[], int i, int n);void Swap(int *a, int *b);void MergeSort(int DataArray[], int n);void MSort(int DataArray[], int TmpArray[], int Left, int Right);void Merge(int DataArray[], int TmpArray[], int Left, int Center, int Right);int main(){    int n;    int data[] = {1, 5, 6, 2, 44, 7, 34, 67, 66};    // IntertionSort(data, sizeof(data) / sizeof(int));    // ShellSort(data, sizeof(data) / sizeof(int));    // HeapSort(data, sizeof(data) / sizeof(int));    MergeSort(data, sizeof(data) / sizeof(int));    for (n = 0; n &amp;lt; sizeof(data) / sizeof(int); n++)    {        printf(&quot;%d\n&quot;, data[n]);    }}// 插入排序 O(N²)void IntertionSort(int data[], int n){    int k, j;    for (k = 1; k &amp;lt; n; k++)    {        int tmp = data[k];        for (j = k; j &amp;gt; 0 &amp;amp;&amp;amp; data[j - 1] &amp;gt; tmp; j--)        {            data[j] = data[j - 1];        }        data[j] = tmp;    }}// 希尔排序 O(N²)void ShellSort(int data[], int n){    int i, j, increment, tmp;    for (increment = n / 2; increment &amp;gt; 0; increment /= 2)    {        for (i = increment; i &amp;lt; n; i++)        {            tmp = data[i];            for (j = i; j &amp;gt;= increment; j -= increment)            {                if (tmp &amp;lt; data[j - increment])                {                    data[j] = data[j - increment];                }                else                {                    break;                }            }            data[j] = tmp;        }    }}// 堆排序 复杂度:NlogN - O(N)void HeapSort(int data[], int n){    int i;    for (i = n / 2; i &amp;gt;= 0; i--)    {        PercDown(data, i, n);    }    for (i = n - 1; i &amp;gt;= 0; i--)    {        Swap(&amp;amp;data[0], &amp;amp;data[i]);        PercDown(data, 0, i);    }}// 节点上虑void PercDown(int data[], int i, int n){    int Tmp;    int Child;    for (Tmp = data[i]; LeftChild(i) &amp;lt; n; i = Child)    {        Child = LeftChild(i);        if (Child != n - 1 &amp;amp;&amp;amp; data[Child + 1] &amp;gt; data[Child])        {            Child++;        }        if (Tmp &amp;lt; data[Child])        {            data[i] = data[Child];        }        else        {            break;        }    }    data[i] = Tmp;}void Swap(int *a, int *b){    int tmp;    tmp = *a;    *a = *b;    *b = tmp;}// 归并排序 复杂度 O(NlogN)void MSort(int DataArray[], int TmpArray[], int Left, int Right){    int Center;    if (Left &amp;lt; Right)    {        Center = (Left + Right) / 2;        MSort(DataArray, TmpArray, Left, Center);        MSort(DataArray, TmpArray, Center + 1, Right);        Merge(DataArray, TmpArray, Left, Center + 1, Right);    }}void MergeSort(int DataArray[], int n){    int *TmpArray;    TmpArray = malloc(n * sizeof(int));    if (TmpArray != NULL)    {        MSort(DataArray, TmpArray, 0, n - 1);        free(TmpArray);    }    else    {        FatalError(&quot;not space TmpArray!!!&quot;);    }}void Merge(int DataArray[], int TmpArray[], int Left, int Center, int RightEnd){    int i, LeftEnd, TmpPos, NumElements;    LeftEnd = Center - 1;    TmpPos = Left;    NumElements = RightEnd - Left + 1;    while (Left &amp;lt;= LeftEnd &amp;amp;&amp;amp; Center &amp;lt;= RightEnd)    {        if (DataArray[Left] &amp;lt; DataArray[Center])        {            TmpArray[TmpPos++] = DataArray[Left++];        }        else        {            TmpArray[TmpPos++] = DataArray[Center++];        }    }    while (Left &amp;lt;= LeftEnd)    {        TmpArray[TmpPos++] = DataArray[Left++];    }    while (Center &amp;lt;= RightEnd)    {        TmpArray[TmpPos++] = DataArray[Center++];    }    for (i = 0; i &amp;lt; NumElements; i++, RightEnd--)    {        DataArray[RightEnd] = TmpArray[RightEnd];    }}`&lt;/pre&gt;###### 快速排序&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`// 快速排序void QuickSort(int d[], int n){    QSort(d, 0, n - 1);}void QSort(int d[], int left, int right){    int median, i, j;    if (left + cutoff &amp;lt;= right)    {        median = Median3(d, left, right);        i = left;        j = right - 1;        for (;;)        {            while (d[++i] &amp;lt; median)            {            }            while (d[--j] &amp;gt; median)            {            }            if (i &amp;lt; j)                Swap(&amp;amp;d[i], &amp;amp;d[j]);            else                break;        }        Swap(&amp;amp;d[i], &amp;amp;d[right - 1]);        QSort(d, left, i - 1);        QSort(d, i + 1, right);    }    else    {        IntertionSort(d + left, right - left + 1);    }}int Median3(int d[], int left, int right){    int median;    median = (left + right) / 2;    if (d[left] &amp;gt; d[median])    {        Swap(&amp;amp;d[left], &amp;amp;d[median]);    }    if (d[left] &amp;gt; d[right])    {        Swap(&amp;amp;d[left], &amp;amp;d[right]);    }    if (d[median] &amp;gt; d[right])    {        Swap(&amp;amp;d[median], &amp;amp;d[right]);    }    Swap(&amp;amp;d[median], &amp;amp;d[right - 1]);    return d[right - 1];}</code></pre>]]></content>
      
      <categories>
          
          <category> c </category>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法分析 从语言描述 </tag>
            
            <tag> c </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Avl平衡树-C语言实现</title>
      <link href="/2017/09/03/Avl%E5%B9%B3%E8%A1%A1%E6%A0%91-C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/09/03/Avl%E5%B9%B3%E8%A1%A1%E6%A0%91-C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="Avl-平衡树-实现记录"><a href="#Avl-平衡树-实现记录" class="headerlink" title="Avl 平衡树 实现记录"></a>Avl 平衡树 实现记录</h3><p><img src="https://upload-images.jianshu.io/upload_images/4560878-e7826f024d26a1a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><p>Avl平衡二叉树和搜索二叉树基本实现原理相同，在搜索二叉树的基础上添加树平衡的操作–单旋和双旋（这也是AvlTree的重难点）。插入数据和删除数据的时候对树进行平衡调整。</p><blockquote><p>需要注意：在删除树节点的操作中，要注意更新调整各节点中高度（Height）的值。Google搜索结果中看了前几个实现AvlTree的文章，基本都没考虑节点Height属性的更新。</p></blockquote><p>实现代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;stdio.h&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &amp;lt;stdlib.h&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FatalError(str) fprintf(stderr, <span class="meta-string">"%s\n"</span>, str), exit(1);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Error(str) FatalError(str);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AvlNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AvlNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AvlNode</span> *<span class="title">AvlTree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AvlNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    AvlTree Left;</span><br><span class="line">    AvlTree Right;</span><br><span class="line">    <span class="keyword">int</span> Height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AvlTree</span><br><span class="line">MakeEmpty(AvlTree T);</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, AvlTree T)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(AvlTree T)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(AvlTree T)</span></span>;</span><br><span class="line"><span class="function">AvlTree <span class="title">Insert</span><span class="params">(ElementType X, AvlTree T)</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">(Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Height</span><span class="params">(Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">SingleRotateWithLeft</span><span class="params">(Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">SingleRotateWithRight</span><span class="params">(Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">DoubleRotateWithLeft</span><span class="params">(Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">DoubleRotateWithRight</span><span class="params">(Position P)</span></span>;</span><br><span class="line"><span class="function">AvlTree <span class="title">Delete</span><span class="params">(Position P, AvlTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">(AvlTree T)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">AvlTree <span class="title">MakeEmpty</span><span class="params">(AvlTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MakeEmpty(T-&amp;gt;Left);</span><br><span class="line">        MakeEmpty(T-&amp;gt;Right);</span><br><span class="line">        <span class="built_in">free</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> P-&amp;gt;Element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, AvlTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &amp;lt; T-&amp;gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&amp;gt;Left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &amp;gt; T-&amp;gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&amp;gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(AvlTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (T-&amp;gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FindMin(T-&amp;gt;Left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(AvlTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (T-&amp;gt;Right != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            T = T-&amp;gt;Right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Height</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (P == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> P-&amp;gt;Height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> height1, <span class="keyword">int</span> height2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (height1 &amp;gt; height2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> height1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> height2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">AvlTree <span class="title">Insert</span><span class="params">(ElementType X, AvlTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct AvlNode));</span><br><span class="line">        <span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Error(<span class="string">"Error: out of space!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&amp;gt;Element = X;</span><br><span class="line">            T-&amp;gt;Left = T-&amp;gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">            T-&amp;gt;Height = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &amp;lt; T-&amp;gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&amp;gt;Left = Insert(X, T-&amp;gt;Left);</span><br><span class="line">        <span class="keyword">if</span> (Height(T-&amp;gt;Left) - Height(T-&amp;gt;Right) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (X &amp;lt; T-&amp;gt;Left-&amp;gt;Element)</span><br><span class="line">            &#123;</span><br><span class="line">                T = SingleRotateWithLeft(T);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                T = DoubleRotateWithLeft(T);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T-&amp;gt;Right = Insert(X, T-&amp;gt;Right);</span><br><span class="line">        <span class="keyword">if</span> (Height(T-&amp;gt;Right) - Height(T-&amp;gt;Left) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (X &amp;gt; T-&amp;gt;Right-&amp;gt;Element)</span><br><span class="line">            &#123;</span><br><span class="line">                T = SingleRotateWithRight(T);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                T = DoubleRotateWithRight(T);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T-&amp;gt;Height = Max(Height(T-&amp;gt;Left), Height(T-&amp;gt;Right)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左单旋</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">SingleRotateWithLeft</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position K1;</span><br><span class="line">    K1 = P-&amp;gt;Left;</span><br><span class="line">    P-&amp;gt;Left = K1-&amp;gt;Right;</span><br><span class="line">    K1-&amp;gt;Right = P;</span><br><span class="line"></span><br><span class="line">    P-&amp;gt;Height = Max(Height(P-&amp;gt;Left), Height(P-&amp;gt;Right)) + <span class="number">1</span>;</span><br><span class="line">    K1-&amp;gt;Height = Max(Height(K1-&amp;gt;Left), P-&amp;gt;Height) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> K1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右单旋</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">SingleRotateWithRight</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position K1;</span><br><span class="line">    K1 = P-&amp;gt;Right;</span><br><span class="line">    P-&amp;gt;Right = K1-&amp;gt;Left;</span><br><span class="line">    K1-&amp;gt;Left = P;</span><br><span class="line"></span><br><span class="line">    P-&amp;gt;Height = Max(Height(P-&amp;gt;Left), Height(P-&amp;gt;Right)) + <span class="number">1</span>;</span><br><span class="line">    K1-&amp;gt;Height = Max(Height(K1-&amp;gt;Left), P-&amp;gt;Height) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> K1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左双旋</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">DoubleRotateWithLeft</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P-&amp;gt;Left = SingleRotateWithRight(P-&amp;gt;Left);</span><br><span class="line">    <span class="keyword">return</span> SingleRotateWithLeft(P);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右双旋</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Position <span class="title">DoubleRotateWithRight</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P-&amp;gt;Right = SingleRotateWithLeft(P-&amp;gt;Right);</span><br><span class="line">    <span class="keyword">return</span> SingleRotateWithRight(P);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function">AvlTree <span class="title">Delete</span><span class="params">(Position P, AvlTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position PMix;</span><br><span class="line">    Position Tmp;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (T-&amp;gt;Element &amp;gt; P-&amp;gt;Element)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// printf("34\n");</span></span><br><span class="line">            T-&amp;gt;Left = Delete(P, T-&amp;gt;Left);</span><br><span class="line">            T-&amp;gt;Height = Max(Height(T-&amp;gt;Right), Height(T-&amp;gt;Left)) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (Height(T-&amp;gt;Right) - Height(T-&amp;gt;Left) == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (T-&amp;gt;Right-&amp;gt;Element &amp;lt; P-&amp;gt;Element)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>  SingleRotateWithRight(T);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> DoubleRotateWithRight(T);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (T-&amp;gt;Element &amp;lt; P-&amp;gt;Element)</span><br><span class="line">        &#123;</span><br><span class="line">            T-&amp;gt;Right = Delete(P, T-&amp;gt;Right);</span><br><span class="line"></span><br><span class="line">            T-&amp;gt;Height = Max(Height(T-&amp;gt;Right), Height(T-&amp;gt;Left)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Height(T-&amp;gt;Left) - Height(T-&amp;gt;Right) == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (T-&amp;gt;Left-&amp;gt;Element &amp;gt; P-&amp;gt;Element)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> SingleRotateWithLeft(T);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>  DoubleRotateWithLeft(T);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (T-&amp;gt;Right != <span class="literal">NULL</span> &amp;amp;&amp;amp; T-&amp;gt;Left != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Height(T-&amp;gt;Right) &amp;gt; Height(T-&amp;gt;Left))</span><br><span class="line">                &#123;</span><br><span class="line">                    PMix = FindMin(T-&amp;gt;Right);</span><br><span class="line">                    T-&amp;gt;Element = PMix-&amp;gt;Element;</span><br><span class="line">                    T-&amp;gt;Right = Delete(PMix, T-&amp;gt;Right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    PMix = FindMax(T-&amp;gt;Left);</span><br><span class="line">                    T-&amp;gt;Element = PMix-&amp;gt;Element;</span><br><span class="line">                    T-&amp;gt;Left = Delete(PMix, T-&amp;gt;Left);</span><br><span class="line">                &#125;</span><br><span class="line">                T-&amp;gt;Height = Max(Height(T-&amp;gt;Right), Height(T-&amp;gt;Left)) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Tmp = P;</span><br><span class="line">                T = P-&amp;gt;Right ? P-&amp;gt;Right : P-&amp;gt;Left;</span><br><span class="line">                <span class="built_in">free</span>(Tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">(AvlTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printTree(T-&amp;gt;Left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, T-&amp;gt;Element);</span><br><span class="line">        printTree(T-&amp;gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,n;</span><br><span class="line">    AvlTree T;</span><br><span class="line">    Position P;</span><br><span class="line">    n = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &amp;lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        T = Insert(i, T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printTree(T);</span><br><span class="line">    P = Find(<span class="number">4</span>, T);</span><br><span class="line">    T = Delete(P, T);</span><br><span class="line"></span><br><span class="line">    P = Find(<span class="number">5</span>, T);</span><br><span class="line">    T = Delete(P, T);</span><br><span class="line"></span><br><span class="line">    P = Find(<span class="number">17</span>, T);</span><br><span class="line">    T = Delete(P, T);</span><br><span class="line"></span><br><span class="line">    T = Insert(<span class="number">5</span>, T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    printTree(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"根节点的高度：%d\n"</span>, T-&amp;gt;Height);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"根节点的值：%d\n"</span>,T-&amp;gt;Element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AvlTree </tag>
            
            <tag> Avl平衡树 </tag>
            
            <tag> 数据结构与算法分析 从语言描述 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python 虚拟环境 virtualenv</title>
      <link href="/2017/08/23/python-e8-99-9a-e6-8b-9f-e7-8e-af-e5-a2-83-virtualenv/"/>
      <url>/2017/08/23/python-e8-99-9a-e6-8b-9f-e7-8e-af-e5-a2-83-virtualenv/</url>
      <content type="html"><![CDATA[<h4 id="（内容来自网络，备用）"><a href="#（内容来自网络，备用）" class="headerlink" title="（内容来自网络，备用）"></a>（内容来自网络，备用）</h4><p><a href="http://pypi.python.org/pypi/virtualenv" target="_blank" rel="noopener">virtualenv</a> 是一个创建隔绝的Python环境的 工具。virtualenv创建一个包含所有必要的可执行文件的文件夹，用来使用Python工程所需的包。<br>通过pip安装virtualenv：<br>$ <code>pip install virtualenv</code></p><p>测试你的安装<br>$ <code>virtualenv --version</code></p><p>基本使用<a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html#id3" target="_blank" rel="noopener"></a><br>为一个工程创建一个虚拟环境：</p><p>$ cd <code>my_project_folder$ virtualenv my_project</code></p><p>virtualenv my_project<br> 将会在当前的目录中创建一个文件夹，包含了Python可执行文件， 以及 pip<br> 库的一份拷贝，这样就能安装其他包了。虚拟环境的名字（此例中是 my_project<br> ） 可以是任意的；若省略名字将会把文件均放在当前目录。<br>在任何你运行命令的目录中，这会创建Python的拷贝，并将之放在叫做 my_project<br> 的文件中。<br>你可以选择使用一个Python解释器（比如<code>python2.7</code>）：<br>$ <code>virtualenv -p /usr/bin/python2.7 my_project</code></p><p>或者使用<code>~/.bashrc</code>的一个环境变量将解释器改为全局性的：<br>$ <code>export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2.7</code></p><p>要开始使用虚拟环境，其需要被激活：</p><p>$ <code>source my_project/bin/activate</code></p><p>当前虚拟环境的名字会显示在提示符左侧（比如说 (my_project)你的电脑:你的工程 用户名$） 以让你知道它是激活的。从现在起，任何你使用pip安装的包将会放在 <code></code>my_project<br>文件夹中， 与全局安装的Python隔绝开。<br>像平常一样安装包，比如：<br>$ <code>pip install requests</code></p><p>如果你在虚拟环境中暂时完成了工作，则可以停用它：</p><p>$ <code>deactivate</code></p><p>这将会回到系统默认的Python解释器，包括已安装的库也会回到默认的。<br>要删除一个虚拟环境，只需删除它的文件夹。（要这么做请执行 rm -rf my_project<br> ）<br>然后一段时间后，你可能会有很多个虚拟环境散落在系统各处，你将有可能忘记它们的名字或者位置。</p><p>其他注意<a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html#id4" target="_blank" rel="noopener"></a><br>运行带 –no-site-packages<br> 选项的 virtualenv<br> 将不会包括全局安装的包。 这可用于保持包列表干净，以防以后需要访问它。（这在 virtualenv<br> 1.7及之后是默认行为）<br>为了保持你的环境的一致性，“冷冻住（freeze）”环境包当前的状态是个好主意。要这么做，请运行：<br>$ <code>pip freeze &amp;gt; requirements.txt</code></p><p>这将会创建一个 requirements.txt<br> 文件，其中包含了当前环境中所有包及 各自的版本的简单列表。你可以使用 “pip list”在不产生requirements文件的情况下， 查看已安装包的列表。这将会使另一个不同的开发者（或者是你，如果你需要重新创建这样的环境） 在以后安装相同版本的相同包变得容易。<br>$ <code>pip install -r requirements.txt</code></p><p>这能帮助确保安装、部署和开发者之间的一致性。<br>最后，记住在源码版本控制中排除掉虚拟环境文件夹，可在ignore的列表中加上它。</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pip 源</title>
      <link href="/2017/08/23/pip-e6-ba-90/"/>
      <url>/2017/08/23/pip-e6-ba-90/</url>
      <content type="html"><![CDATA[<p>阿里</p><blockquote><p><a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分析Laravel队列实现原理解决问题</title>
      <link href="/2017/08/19/laravel-e9-98-9f-e5-88-97-e4-bd-bf-e7-94-a8-e4-b8-ad-e7-9a-84-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3-e8-ae-b0-e5-bd-95/"/>
      <url>/2017/08/19/laravel-e9-98-9f-e5-88-97-e4-bd-bf-e7-94-a8-e4-b8-ad-e7-9a-84-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3-e8-ae-b0-e5-bd-95/</url>
      <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>公司项目使用Laravel的开发的两个项目在同一个测试服务器部署，公用同一个redis。在使用laravel中的队列时，产生冲突干扰。</p><h4 id="查找问题原因"><a href="#查找问题原因" class="headerlink" title="查找问题原因"></a>查找问题原因</h4><p>在laravel 队列的操作类<code>Illuminate\Queue\RedisQueue.php</code>中可以看到<code>pushRaw()</code>方法：</p><pre><code>// 将一任务推入队列中public function pushRaw($payload, $queue = null, array $options = [])    {        $this-&amp;gt;getConnection()-&amp;gt;rpush($this-&amp;gt;getQueue($queue), $payload);        return Arr::get(json_decode($payload, true), &apos;id&apos;);    }`&lt;/pre&gt;从该方法中可以看出Lrarvel队列的redis实现是通过list结构实现的，`rpush(key, value)`是将value推入键值为key的redis队列，key的值则是通过`$this-&amp;gt;getQueue($queue)` 获取到的&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`protected function getQueue($queue)    {        return &apos;queues:&apos;.($queue ?: $this-&amp;gt;default);    }`&lt;/pre&gt;所以的redis中list中的key是 `&apos;queues:&apos;.($queue ?: $this-&amp;gt;default);`拼接的，`$this-&amp;gt;default` 的值是 `RedisQueue` 实例化的时候从`config\queue.php`配置中加载的 `&apos;queue&apos;      =&amp;gt; &apos;default&apos;`，`$queue` 是添加队列时`$this-&amp;gt;dispatch( new jobClass()-&amp;gt;onQueue($queue) )`传入的。&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`// config\queue.php 文件中的redis配置部分&apos;redis&apos; =&amp;gt; [            &apos;driver&apos;     =&amp;gt; &apos;redis&apos;,            &apos;connection&apos; =&amp;gt; &apos;default&apos;,            &apos;queue&apos;      =&amp;gt; &apos;default&apos;,            &apos;expire&apos;     =&amp;gt; 60,        ],`&lt;/pre&gt;至此，两个项目的队列冲突原因就找到了。因为redis队列配置中 `&apos;queue&apos;      =&amp;gt; &apos;default&apos;` 都使用的默认的default，所以当共用redis时，默认的队列list 都是&apos;queue:default&apos;,所以导致了冲突。因为队列监听 监听的队列名称是由 --queue参数决定的，如果不传就是我们上面设置的默认值，若传了就会根据传入的队列名从前往后优先依次处理，具体见代码`Illuminate\Queue\Worker.php`中：&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`protected function getNextJob($connection, $queue)    {        if (is_null($queue)) {            return $connection-&amp;gt;pop();        }        foreach (explode(&apos;,&apos;, $queue) as $queue) {            if (! is_null($job = $connection-&amp;gt;pop($queue))) {                return $job;            }        }    }`&lt;/pre&gt;`$queue`就是`--queue=`传入的参数，当 $queue不存在是直接调用`$connection-&amp;gt;pop()`当参数存在时会将参数解析，优先处理排在前面的队列名称，将队列名称传入`pop($queue)`, `pop()`会尝试从指定队列或默认队列中获取队列任务&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`// Illuminate\Queue\RedisQueue.phppublic function pop($queue = null)    {        $original = $queue ?: $this-&amp;gt;default;        $queue = $this-&amp;gt;getQueue($queue);        if (! is_null($this-&amp;gt;expire)) {            $this-&amp;gt;migrateAllExpiredJobs($queue);        }        $job = $this-&amp;gt;getConnection()-&amp;gt;lpop($queue);        if (! is_null($job)) {            $this-&amp;gt;getConnection()-&amp;gt;zadd($queue.&apos;:reserved&apos;, $this-&amp;gt;getTime() + $this-&amp;gt;expire, $job);            return new RedisJob($this-&amp;gt;container, $this, $job, $original);        }    }</code></pre><p>至此搞清了队列执行的原理。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>将queue的配置文件中默认队列修改为不同的名称，比如： ‘queue’      =&gt; laravel1’,’queue’      =&gt; laravel2’。</p><p>队列监听 <code>php artisan queue:listen redis --queue=laravel1,syncExpress</code></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>遇到问题，莫要病急乱投医。从代码入手，分析理解实现原理，找对点，解决方法也许很简单，^_^。</p><p>欢迎关注我的<a href="http://llheng.info" target="_blank" rel="noopener">博客</a></p>]]></content>
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> php </tag>
            
            <tag> queue </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go 各平台交叉编译</title>
      <link href="/2017/08/12/Go%20%E5%90%84%E5%B9%B3%E5%8F%B0%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
      <url>/2017/08/12/Go%20%E5%90%84%E5%B9%B3%E5%8F%B0%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<h6 id="Golang-支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。"><a href="#Golang-支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。" class="headerlink" title="Golang 支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。"></a>Golang 支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。</h6><p>Mac 下编译 <a href="http://lib.csdn.net/base/linux" target="_blank" rel="noopener">Linux</a> 和 Windows 64位可执行程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=<span class="number">0</span> GOOS=linux GOARCH=amd64 <span class="keyword">go</span> build </span><br><span class="line">CGO_ENABLED=<span class="number">0</span> GOOS=windows GOARCH=amd64 <span class="keyword">go</span> build</span><br></pre></td></tr></table></figure><p><a href="http://lib.csdn.net/base/linux" target="_blank" rel="noopener">linux</a> 下编译 Mac 和 Windows 64位可执行程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=<span class="number">0</span> GOOS=darwin GOARCH=amd64 <span class="keyword">go</span> build </span><br><span class="line">CGO_ENABLED=<span class="number">0</span> GOOS=windows GOARCH=amd64 <span class="keyword">go</span> build</span><br></pre></td></tr></table></figure><p>Windows 下编译 Mac 和 Linux 64位可执行程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET CGO_ENABLED=<span class="number">0</span>SET GOOS=darwinSET GOARCH=amd64 <span class="keyword">go</span> build main.<span class="keyword">go</span></span><br><span class="line">SET CGO_ENABLED=<span class="number">0</span>SET GOOS=linuxSET GOARCH=amd64 <span class="keyword">go</span> build main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><blockquote><p>GOOS：目标平台的<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" rel="noopener">操作系统</a>（darwin、freebsd、linux、windows） GOARCH：目标平台的体系<a href="http://lib.csdn.net/base/architecture" target="_blank" rel="noopener">架构</a>（386、amd64、arm） 交叉编译不支持 CGO 所以要禁用它<br>  上面的命令编译 64 位可执行程序，你当然应该也会使用 386 编译 32 位可执行程序 很多博客都提到要先增加对其它平台的支持，但是我跳过那一步，上面所列的命令也都能成功，且得到我想要的结果，可见那一步应该是非必须的，或是我所使用的 <a href="http://lib.csdn.net/base/go" target="_blank" rel="noopener">Go</a> 版本已默认支持所有平台。</p></blockquote>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树--C语言实现</title>
      <link href="/2017/07/20/%E4%BA%8C%E5%8F%89%E6%A0%91--C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/07/20/%E4%BA%8C%E5%8F%89%E6%A0%91--C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="数据结构与算法分析-笔记"><a href="#数据结构与算法分析-笔记" class="headerlink" title="数据结构与算法分析 笔记"></a>数据结构与算法分析 笔记</h3><h6 id="searchtree-c"><a href="#searchtree-c" class="headerlink" title="searchtree.c"></a>searchtree.c</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FatalError(str) fprintf(stderr, <span class="meta-string">"%s\n"</span>, str),exit(1);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Error(str) FatalError(str);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">SearchTree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="function">SearchTree <span class="title">MakeEmpty</span><span class="params">(SearchTree T)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, SearchTree T)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(SearchTree)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(SearchTree)</span></span>;</span><br><span class="line"><span class="function">SearchTree <span class="title">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span>;</span><br><span class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">(ElementType X, SearchTree T)</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">(Position P)</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">DeleteMin</span><span class="params">(SearchTree T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    Position Left;</span><br><span class="line">    Position Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">SearchTree <span class="title">MakeEmpty</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        T-&amp;gt;Element = <span class="literal">NULL</span>;</span><br><span class="line">        MakeEmpty(T-&amp;gt;Left);</span><br><span class="line">        MakeEmpty(T-&amp;gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(X &amp;lt; T-&amp;gt;Element)&#123;</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&amp;gt;Left);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(X &amp;gt; T-&amp;gt;Element)&#123;</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&amp;gt;Right);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(T-&amp;gt;Left == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FindMin(T-&amp;gt;Left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(T-&amp;gt;Right != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            T = T-&amp;gt;Right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Position FindMax(SearchTree T)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     if(T == NULL)&#123;</span></span><br><span class="line"><span class="comment">//         return NULL;</span></span><br><span class="line"><span class="comment">//     &#125;else</span></span><br><span class="line"><span class="comment">//     if(T-&amp;gt;Right == NULL)&#123;</span></span><br><span class="line"><span class="comment">//         return T;</span></span><br><span class="line"><span class="comment">//     &#125;else&#123;</span></span><br><span class="line"><span class="comment">//         return FindMax(T-&amp;gt;Right);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function">SearchTree <span class="title">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">        <span class="keyword">if</span>( T == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&amp;gt;Element = X;</span><br><span class="line">            T-&amp;gt;Left = T-&amp;gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(X &amp;lt; T-&amp;gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&amp;gt;Left = Insert(X, T-&amp;gt;Left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(X &amp;gt; T-&amp;gt;Element)</span><br><span class="line">        T-&amp;gt;Right = Insert(X, T-&amp;gt;Right);</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">Retrieve</span><span class="params">(Position P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> P-&amp;gt;Element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Error(<span class="string">"Element not found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">if</span>(X &amp;lt; T-&amp;gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        T = T-&amp;gt;Left;</span><br><span class="line">        <span class="keyword">return</span> Delete(X, T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">if</span>(X &amp;gt; T-&amp;gt;Element)</span><br><span class="line">    &#123;</span><br><span class="line">        T = T-&amp;gt;Right;</span><br><span class="line">        <span class="keyword">return</span> Delete(X, T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(T-&amp;gt;Left &amp;amp;&amp;amp; T-&amp;gt;Right)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&amp;gt;Element = DeleteMin(T-&amp;gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        P = T;</span><br><span class="line">        <span class="keyword">if</span>(T-&amp;gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&amp;gt;Right;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(T-&amp;gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&amp;gt;Left;</span><br><span class="line">        <span class="built_in">free</span>(P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElementType <span class="title">DeleteMin</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position P;</span><br><span class="line">    ElementType X;</span><br><span class="line">    P = FindMin(T);</span><br><span class="line">    X = P-&amp;gt;Element;</span><br><span class="line">    <span class="built_in">free</span>(P);</span><br><span class="line">    <span class="keyword">return</span> X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSearchTree</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Error(<span class="string">"Element not found"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(T-&amp;gt;Left == <span class="literal">NULL</span> &amp;amp;&amp;amp; T-&amp;gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&amp;gt;Element);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(T-&amp;gt;Left != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PrintSearchTree(T-&amp;gt;Left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&amp;gt;Element);</span><br><span class="line">        <span class="keyword">if</span>(T-&amp;gt;Right != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PrintSearchTree(T-&amp;gt;Right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SearchTreeTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SearchTree T;</span><br><span class="line">    T = MakeEmpty(T);</span><br><span class="line">    T = Insert(<span class="number">1</span>,T);</span><br><span class="line">    T = Insert(<span class="number">3</span>,T);</span><br><span class="line">    T = Insert(<span class="number">2</span>,T);</span><br><span class="line">    T = Insert(<span class="number">6</span>,T);</span><br><span class="line">    T = Insert(<span class="number">4</span>,T);</span><br><span class="line">    PrintSearchTree(T);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&gt; main.c</span><br><span class="line"></span><br><span class="line">&lt;pre <span class="class"><span class="keyword">class</span>="<span class="title">line</span>-<span class="title">numbers</span> <span class="title">prism</span>-<span class="title">highlight</span>" <span class="title">data</span>-<span class="title">start</span>="1"&gt;`#<span class="title">include</span> "<span class="title">searchtree</span>.<span class="title">c</span>"</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">main</span>(<span class="title">void</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SearchTreeTest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> c </category>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构与算法分析-c 练习 3-2 答案</title>
      <link href="/2017/07/11/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-e7-bb-83-e4-b9-a0-3-2-e7-ad-94-e6-a1-88/"/>
      <url>/2017/07/11/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-e7-bb-83-e4-b9-a0-3-2-e7-ad-94-e6-a1-88/</url>
      <content type="html"><![CDATA[<pre><code>#include &quot;list.c&quot;#define FatalError(str) fprintf(stderr, &quot;%s\n&quot;, str),exit(1);void PrintLots(List L, List P){    Position Lnext,Pnext;    int n;    if(IsEmpty(L)){        FatalError(&quot;list is empty!!!&quot;);    }    n = 1;    Lnext = L;    Pnext = P;    while((Lnext = Advance(Lnext)) != NULL){        while((Pnext = Advance(Pnext)) != NULL){            if(n++ == Lnext-&amp;gt;Element){                printf(&quot;%d\n&quot;, Pnext-&amp;gt;Element);                break;            }        }        if(Lnext == NULL || Pnext == NULL){            return;        }    }}</code></pre>]]></content>
      
      <categories>
          
          <category> c </category>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法分析 从语言描述 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构之栈--C语言 数组实现</title>
      <link href="/2017/07/09/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b9-8b-e6-a0-88-c-e8-af-ad-e8-a8-80-e6-95-b0-e7-bb-84-e5-ae-9e-e7-8e-b0/"/>
      <url>/2017/07/09/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b9-8b-e6-a0-88-c-e8-af-ad-e8-a8-80-e6-95-b0-e7-bb-84-e5-ae-9e-e7-8e-b0/</url>
      <content type="html"><![CDATA[<pre><code>#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;// 栈操作数组实现typedef int ElementType;struct StackRecord;typedef struct StackRecord *Stack;int IsEmpty(Stack S);int IsFull(Stack S);Stack CreateStack(int MaxElements);void DisposeStack(Stack S);void MakeEmpty(Stack S);void Push(ElementType X, Stack S);ElementType Top(Stack S);void Pop(Stack S);ElementType TopAndPop(Stack S);void _Test(void);#define EmptyTOS (-1)#define MinStackSize (5)#define Error(str) fprintf(stderr,&quot;%s/n&quot;, str),exit(1)struct StackRecord {    int Capacity;    int TopOfStack;    ElementType *Array;};// 判断栈是否为空int IsEmpty(Stack S){    return S-&amp;gt;TopOfStack == EmptyTOS;}// 判断栈是否已满int IsFull(Stack S){    return S-&amp;gt; Capacity == S-&amp;gt;TopOfStack;}Stack CreateStack(int MaxElements){    Stack S;    if(MaxElements &amp;lt; MinStackSize){        Error(&quot;Stack size too small&quot;);    }    S = malloc(sizeof(struct StackRecord));    if(S == NULL){        Error(&quot;Out of space!!!&quot;);    }    S-&amp;gt;Array = malloc(sizeof(ElementType) * MaxElements);    if(S-&amp;gt;Array == NULL){        Error(&quot;Out of space!!!&quot;);    }    S-&amp;gt;Capacity = MaxElements;    MakeEmpty(S);    return S;}void MakeEmpty(Stack S){    S-&amp;gt;TopOfStack = EmptyTOS;}void DisposeStack(Stack S){    if(S == NULL){        free(S-&amp;gt;Array);        free(S);    }}void Push(ElementType X, Stack S){    if(IsFull(S)){        Error(&quot;full stack&quot;);    }else{        S-&amp;gt;Array[++S-&amp;gt;TopOfStack] = X;    }  }ElementType Top(Stack S){    if(!IsEmpty(S)){        return S-&amp;gt;Array[S-&amp;gt;TopOfStack];    }    Error(&quot;Empty Stack!!!&quot;);    return 0;}void Pop(Stack S){    if(IsEmpty(S)){        Error(&quot;Empty Stack&quot;);    }else{        S-&amp;gt;TopOfStack--;    }}ElementType TopAndPop(Stack S){    if(IsEmpty(S)){        Error(&quot;Empty stack&quot;);        return 0;    }else{        return S-&amp;gt;TopOfStack--;    }}void _Test(void){    int a, b, c;    Stack S;    a = 1;    b = 2;    c = 3;    S = CreateStack(10);    if(S == NULL){        Error(&quot;create stack err&quot;);    }    Push(a, S);    printf(&quot;%d\\n&quot;, Top(S));    Push(b, S);    printf(&quot;%d\\n&quot;, Top(S));    Pop(S);    printf(&quot;%d\\n&quot;, Top(S));    MakeEmpty(S);    Push(c, S);    printf(&quot;%d\\n&quot;, Top(S));}</code></pre>]]></content>
      
      <categories>
          
          <category> c </category>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> stack </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构之栈--C实现笔记</title>
      <link href="/2017/07/05/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b9-8b-e6-a0-88-c-e5-ae-9e-e7-8e-b0-e7-ac-94-e8-ae-b0/"/>
      <url>/2017/07/05/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b9-8b-e6-a0-88-c-e5-ae-9e-e7-8e-b0-e7-ac-94-e8-ae-b0/</url>
      <content type="html"><![CDATA[<pre><code>#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#define FatalError(str) fprintf(stderr, &quot;%s\\n&quot;, str),exit(1);#define Error(str) FatalError(str);#ifndef _stack_hstruct Node;typedef struct Node *PtrToNode;typedef PtrToNode Stack;typedef int ElementType;Stack CreateStack(void);int IsEmpty(Stack S);void MakeEmpty(Stack S);void Pop(Stack S);void Push(ElementType X, Stack S);ElementType Top(Stack S);void _Test(void);#endifstruct Node{    ElementType Element;    PtrToNode Next;};Stack CreateStack(void){    Stack S;    S = malloc(sizeof(struct Node));    if(S == NULL){        FatalError(&quot;Out of space!!!&quot;);    }    S-&amp;gt;Next = NULL;    return S;}int IsEmpty(Stack S){    return S-&amp;gt;Next == NULL;}void MakeEmpty(Stack S){    if(S == NULL){        Error(&quot;Must use CreateStack first&quot;);    }else{        while(!IsEmpty(S)){        Pop(S);        }    }}void Push(ElementType X, Stack S){    PtrToNode TmpCell;    TmpCell = malloc(sizeof(struct Node));    if(TmpCell == NULL){        FatalError(&quot;out of space!!!&quot;);    }else{        TmpCell-&amp;gt;Element = X;        TmpCell-&amp;gt;Next = S-&amp;gt;Next;        S-&amp;gt;Next = TmpCell;    }}ElementType Top(Stack S){    if(!IsEmpty(S)){        return S-&amp;gt;Next-&amp;gt;Element;    }    Error(&quot;stack empty!&quot;);    return 0;}void Pop(Stack S){    PtrToNode TmpCell;    if(IsEmpty(S)){        Error(&quot;stack empty!&quot;);    }else{        TmpCell = S-&amp;gt;Next;        S-&amp;gt;Next = S-&amp;gt;Next-&amp;gt;Next;        free(TmpCell);    }}void _Test(void){    int a, b, c;    Stack S;    a = 1;    b = 2;    c = 3;    S = CreateStack();    if(S == NULL){        FatalError(&quot;create stack err&quot;);    }    Push(a, S);    printf(&quot;%d\\n&quot;, Top(S));    Push(b, S);    printf(&quot;%d\\n&quot;, Top(S));    Pop(S);    printf(&quot;%d\\n&quot;, Top(S));    MakeEmpty(S);    Push(c, S);    printf(&quot;%d\\n&quot;, Top(S));}</code></pre>]]></content>
      
      <categories>
          
          <category> c </category>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 栈，stack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单链表笔记</title>
      <link href="/2017/07/02/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>/2017/07/02/%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>list.c</p><pre><code>#include &lt;stdio.h&gt;;#include &lt;stdlib.h&gt;;#define FatalError(str) fprintf(stderr, &quot;%s\n&quot;, str),exit(1);typedef int ElementType;#ifndef _list_Hstruct Node;typedef struct Node *PtrToNode;typedef PtrToNode List;typedef PtrToNode Position;List MakeEmpty(List L);int IsEmpty(List L);int IsLast(Position P, List L);Position Find(ElementType X, List L);void Delete(ElementType X, List L);Position FindPrevious(ElementType X, List L);void Insert(ElementType X, List L, Position P);void DeleteList(List L);Position Header(List L);Position First(List L);Position Advance(Position P);ElementType Retrieve(Position P);#endifstruct Node {    ElementType Element;    Position Next;};List MakeEmpty(List L){    if (L != NULL){        DeleteList(L);    }    L = malloc(sizeof(struct Node));    if(L == NULL){        FatalError(&quot;Out of space!!!&quot;);    }    L-&amp;gt;Next = NULL;    return L;}// 测试链表是否是空链表int IsEmpty(List L){    return L-&amp;gt;Next == NULL;}// 检测当前位置是否是链表的末尾int IsLast(Position P, List L){    return P-&amp;gt;Next == NULL;}// 查找链表中第一次出现X的位置Position Find(ElementType X, List L){    Position P;    P = L-&amp;gt;Next;    while(P != NULL &amp;amp;&amp;amp; P-&amp;gt;Element != X){        P = P-&amp;gt;Next;    }    return P;}Position FindPrevious(ElementType X, List L){    Position P;    P = L;    while(P-&amp;gt;Next != NULL &amp;amp;&amp;amp; P-&amp;gt;Next-&amp;gt;Element != X){        P = P-&amp;gt;Next;    }    return P;}void Delete(ElementType X, List L){    Position P, TmpCell;    P = FindPrevious(X, L);    if(!IsLast(P, L)){        TmpCell = P-&amp;gt;Next;        P-&amp;gt;Next = TmpCell-&amp;gt;Next;        free(TmpCell);    }}void Insert(ElementType X, List L, Position P){    Position TmpCell;    TmpCell = malloc(sizeof(struct Node));    if(TmpCell == NULL){        FatalError(&quot;Out of space!!!&quot;);    }    TmpCell-&amp;gt;Element = X;    TmpCell-&amp;gt;Next = P-&amp;gt;Next;    P-&amp;gt;Next = TmpCell;}void DeleteList(List L){    Position P, TmpCell;    P = L-&amp;gt;Next;    L-&amp;gt;Next = NULL;    while(P != NULL){        TmpCell = P-&amp;gt;Next;        free(P);        P = TmpCell;    }}Position Header(List L){    return L;}Position First(List L){    return L-&amp;gt;Next;}Position Advance(Position P){    return P-&amp;gt;Next;}ElementType Retrieve(Position P){    return P-&amp;gt;Element;}void PrintList(List L){    Position P = Header(L);    if(IsEmpty(L)){        FatalError(&quot;Empty List\n&quot;);    }else{        do{            P = Advance(P);            printf(&quot;%d &quot;, P-&amp;gt;Element);        }while(!IsLast(P, L));    }    printf(&quot;\n&quot;);}`&lt;/pre&gt;main.c&lt;pre class=&quot;line-numbers prism-highlight&quot; data-start=&quot;1&quot;&gt;`#include &quot;list.c&quot;int main(){    List L;    Position P;    L = MakeEmpty(NULL);    P = Header(L);    Insert(1, L, P);    PrintList(L);    P = Advance(P);    Insert(2, L, P);    PrintList(L);    Delete(1, L);    PrintList(L);    DeleteList(L);    PrintList(L);    return 0;}</code></pre>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>记一次使用七牛获取token的错误</title>
      <link href="/2017/06/26/e8-ae-b0-e4-b8-80-e6-ac-a1-e4-bd-bf-e7-94-a8-e4-b8-83-e7-89-9b-e8-8e-b7-e5-8f-96token-e7-9a-84-e9-94-99-e8-af-af/"/>
      <url>/2017/06/26/e8-ae-b0-e4-b8-80-e6-ac-a1-e4-bd-bf-e7-94-a8-e4-b8-83-e7-89-9b-e8-8e-b7-e5-8f-96token-e7-9a-84-e9-94-99-e8-af-af/</url>
      <content type="html"><![CDATA[<p>测试服务器中的磁盘满了，整理后使用，发现七牛获取token 出错</p><pre><code>array_key_exists() expects parameter 2 to be array, null given</code></pre><p>经过排查发现，七牛会将从自己服务器中配置信息缓存在服务器的临时文件中。<br>因为测试服务器磁盘满了，导致七牛的SDK在创建临时文件时，文件创建了但内容没有写入，获取信息时判断文件存在，里面信息为空，结果导致了上面报错</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>删除了七牛临时文 <code>.qiniu_phpsdk_hostscache.json</code></p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 七牛 </tag>
            
            <tag> 错误处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac brew常用使用方法</title>
      <link href="/2017/06/25/mac-brew-e5-b8-b8-e7-94-a8-e4-bd-bf-e7-94-a8-e6-96-b9-e6-b3-95/"/>
      <url>/2017/06/25/mac-brew-e5-b8-b8-e7-94-a8-e4-bd-bf-e7-94-a8-e6-96-b9-e6-b3-95/</url>
      <content type="html"><![CDATA[<p>搜索： <code>brew search mysql</code></p><p>查询：<code>brew info mysql</code> 主要看具体的信息，比如目前的版本，依赖，安装后注意事项等</p><p>更新：<code>brew update</code> 这会更新 Homebrew 自己，并且使得接下来的两个操作有意义——</p><p>检查过时（是否有新版本）：<code>brew outdated</code> 这回列出所有安装的软件里可以升级的那些</p><p>升级：<code>brew upgrade</code> 升级所有可以升级的软件们</p><p>清理：<code>brew cleanup</code> 清理不需要的版本极其安装包缓存</p><p>卸载更方便了  <code>brew uninstall</code></p>]]></content>
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> brew </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【c语言】判断两个文件是否一致</title>
      <link href="/2017/06/19/c%E8%AF%AD%E8%A8%80-%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4/"/>
      <url>/2017/06/19/c%E8%AF%AD%E8%A8%80-%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4/</url>
      <content type="html"><![CDATA[<h4 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h4><h6 id="判断两个文件是否一致-并打印出第一个不同行"><a href="#判断两个文件是否一致-并打印出第一个不同行" class="headerlink" title="判断两个文件是否一致 并打印出第一个不同行"></a>判断两个文件是否一致 并打印出第一个不同行</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">diff</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">3</span> != argc)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"参数不正确\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    diff(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">diff</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *afp;</span><br><span class="line">    FILE *bfp;</span><br><span class="line">    <span class="keyword">char</span> aline[MAXLINE];</span><br><span class="line">    <span class="keyword">char</span> bline[MAXLINE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((afp = fopen(a, <span class="string">"r"</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: not file %s"</span>, a);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((bfp = fopen(b, <span class="string">"r"</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: not file %s"</span>, b);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((fgets(aline, MAXLINE, afp) == aline) &amp;amp;&amp;amp; (fgets(bline, MAXLINE, bfp) == bline))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(aline, bline) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s:%s"</span>, a, aline);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s:%s"</span>, b, bline);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(afp);</span><br><span class="line">    fclose(bfp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【mysql】 order by case when 的用法</title>
      <link href="/2017/06/18/order%20by%20case%20when%20%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2017/06/18/order%20by%20case%20when%20%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<pre><code>select * from table order by case field when field=2 then 1 else 0 end, field desc;</code></pre><h3 id="【解释】查询时，当某条数据中的字段field-的值为2时，该条field的排序权值为1，其他的为0，使用降序排列；"><a href="#【解释】查询时，当某条数据中的字段field-的值为2时，该条field的排序权值为1，其他的为0，使用降序排列；" class="headerlink" title="【解释】查询时，当某条数据中的字段field 的值为2时，该条field的排序权值为1，其他的为0，使用降序排列；"></a>【解释】查询时，当某条数据中的字段field 的值为2时，该条field的排序权值为1，其他的为0，使用降序排列；</h3>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Laravel服务容器实现原理</title>
      <link href="/2017/06/17/Laravel%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2017/06/17/Laravel%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过实现laravel 框架功能，以便深入理解laravel框架的先进思想。</p><h4 id="什么是服务容器"><a href="#什么是服务容器" class="headerlink" title="什么是服务容器"></a>什么是服务容器</h4><blockquote><p>服务容器是用来管理类依赖与运行依赖注入的工具。Laravel框架中就是使用服务容器来实现 <strong>控制反转</strong>和<strong>依赖注入</strong>。</p></blockquote><h4 id="什么是控制反转（IoC）和依赖注入（DI）"><a href="#什么是控制反转（IoC）和依赖注入（DI）" class="headerlink" title="什么是控制反转（IoC）和依赖注入（DI）"></a>什么是控制反转（IoC）和依赖注入（DI）</h4><blockquote><p>控制反转(IoC) 就是说把创建对象的<strong>控制权</strong>进行转移，以前创建对象的主动权和创建时机是由自己把控的，而现在这种权力转移到第三方，也就是 <strong>Laravel</strong> 中的容器。</p><p>  依赖注入（DI）则是帮助容器实现在运行中动态的为对象提供提依赖的资源。</p></blockquote><a id="more"></a><p>概念容易不太容易让人理解，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们构建一个人的类和一个狗的类</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $dog = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&amp;gt;dog = <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putDog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&amp;gt;dog-&amp;gt;dogCall();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dogCall</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'汪汪汪'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个人在遛狗，突然遇到了死对头，他于是放狗咬人</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$people = <span class="keyword">new</span> People();</span><br><span class="line">$people-&gt;putDog();</span><br></pre></td></tr></table></figure><p>在这个操作中，people类要执行<code>putDog()</code>这个方法，需要依赖Dog类，一般我们像上面一样，在people中利用构造函数来添加这个Dog依赖。如果使用控制反转 依赖注入则是这个样子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $dog = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Dog $dog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&amp;gt;dog = $dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putDog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&amp;gt;dog-&amp;gt;dogCall();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>People类通过构造参数声明自己需要的 依赖类，由容器自动注入。这样就实现了程序的有效解耦，好处在这就不多说了。</p><h2 id="Laravel容器依赖注入的实现"><a href="#Laravel容器依赖注入的实现" class="headerlink" title="Laravel容器依赖注入的实现"></a>Laravel容器依赖注入的实现</h2><h6 id="实现原理需要了解的知识点："><a href="#实现原理需要了解的知识点：" class="headerlink" title="实现原理需要了解的知识点："></a>实现原理需要了解的知识点：</h6><blockquote><p>闭包（匿名函数）：<br>匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数</p><p>反射：PHP 5 以上版本具有完整的反射 API，添加了对类、接口、函数、方法和扩展进行反向工程的能力。 此外，反射 API 提供了方法来取出函数、类和方法中的文档注释</p></blockquote><h6 id="理解了闭包和反射的基本用法我们来看Laravel中是怎么实现容器的，下面代码是我对laravel框架容器部分代码的简化核心版："><a href="#理解了闭包和反射的基本用法我们来看Laravel中是怎么实现容器的，下面代码是我对laravel框架容器部分代码的简化核心版：" class="headerlink" title="理解了闭包和反射的基本用法我们来看Laravel中是怎么实现容器的，下面代码是我对laravel框架容器部分代码的简化核心版："></a>理解了闭包和反射的基本用法我们来看Laravel中是怎么实现容器的，下面代码是我对laravel框架容器部分代码的简化核心版：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Containerc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  容器绑定，用来装提供的实例或者 提供实例的回调函数</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> $building = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 注册一个绑定到容器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, $concrete = null, $shared = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_null($concrete))&#123;</span><br><span class="line">            $concrete = $abstract;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$concrete <span class="keyword">instanceOf</span> Closure)&#123;</span><br><span class="line">            $concrete = <span class="keyword">$this</span>-&amp;gt;getClosure($abstract, $concrete);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&amp;gt;building[$abstract] =  compact(<span class="string">"concrete"</span>, <span class="string">"shared"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个共享的绑定 单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">singleton</span><span class="params">($abstract, $concrete, $shared = true)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&amp;gt;bind($abstract, $concrete, $shared);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 默认生成实例的回调闭包</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> $abstract</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> $concrete</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> Closure</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClosure</span><span class="params">($abstract, $concrete)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">($c)</span> <span class="title">use</span><span class="params">($abstract, $concrete)</span></span>&#123;</span><br><span class="line">            $method = ($abstract == $concrete)? <span class="string">'build'</span> : <span class="string">'make'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $c-&amp;gt;$method($concrete);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 生成实例 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $concrete = <span class="keyword">$this</span>-&amp;gt;getConcrete($abstract);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&amp;gt;isBuildable($concrete, $abstract))&#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&amp;gt;build($concrete);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&amp;gt;make($concrete);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 获取绑定的回调函数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&amp;gt;building[$abstract]))&#123;</span><br><span class="line">            <span class="keyword">return</span> $abstract;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&amp;gt;building[$abstract][<span class="string">'concrete'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 判断 是否 可以创建服务实体</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 根据实例具体名称实例具体对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">($concrete)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($concrete <span class="keyword">instanceof</span> Closure)&#123;</span><br><span class="line">            <span class="keyword">return</span> $concrete(<span class="keyword">$this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建反射对象</span></span><br><span class="line">        $reflector = <span class="keyword">new</span> ReflectionClass($concrete);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( ! $reflector-&amp;gt;isInstantiable())&#123;</span><br><span class="line">            <span class="comment">//抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'无法实例化'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $constructor = $reflector-&amp;gt;getConstructor();</span><br><span class="line">        <span class="keyword">if</span>(is_null($constructor))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> $concrete;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $dependencies = $constructor-&amp;gt;getParameters();</span><br><span class="line">        $instance = <span class="keyword">$this</span>-&amp;gt;getDependencies($dependencies);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $reflector-&amp;gt;newInstanceArgs($instance);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射解决参数依赖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDependencies</span><span class="params">(array $dependencies)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $results = [];</span><br><span class="line">        <span class="keyword">foreach</span>( $dependencies <span class="keyword">as</span> $dependency )&#123;</span><br><span class="line">            $results[] = is_null($dependency-&amp;gt;getClass())</span><br><span class="line">                ?<span class="keyword">$this</span>-&amp;gt;resolvedNonClass($dependency)</span><br><span class="line">                :<span class="keyword">$this</span>-&amp;gt;resolvedClass($dependency);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决一个没有类型提示依赖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resolvedNonClass</span><span class="params">(ReflectionParameter $parameter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($parameter-&amp;gt;isDefaultValueAvailable())&#123;</span><br><span class="line">            <span class="keyword">return</span> $parameter-&amp;gt;getDefaultValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'出错'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过容器解决依赖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resolvedClass</span><span class="params">(ReflectionParameter $parameter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&amp;gt;make($parameter-&amp;gt;getClass()-&amp;gt;name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="容器的工作流程"><a href="#容器的工作流程" class="headerlink" title="容器的工作流程"></a>容器的工作流程</h4><p>接着上面遛狗的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化容器类</span></span><br><span class="line">$app =  <span class="keyword">new</span> Container();</span><br><span class="line"><span class="comment">//向容器中填充Dog</span></span><br><span class="line">$app-&amp;gt;bind(<span class="string">'Dog'</span>,<span class="string">'App\Dog'</span>);</span><br><span class="line"><span class="comment">//填充People</span></span><br><span class="line">$app-&amp;gt;bind(<span class="string">'People'</span>, <span class="string">'App\People'</span>);</span><br><span class="line"><span class="comment">//通过容器实现依赖注入，完成类的实例化；</span></span><br><span class="line">$people = $app-&amp;gt;make(<span class="string">'People'</span>);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="keyword">echo</span> $people-&amp;gt;putDog();</span><br></pre></td></tr></table></figure><p>上面示例中我们先实例化容器类，然后使用<code>bind()</code>方法 绑定接口和 生成相应的实例的闭包函数。然后使用<code>make()</code> 函数生成实例对象，在<code>make()</code>中会调用 <code>isBuildable($concrete, $abstract)</code> 来判断 给定的服务实体（<code>$concrete</code>参数）是否可以创建，可以创建 就会调用 <code>build($concrete)</code> 函数 ，<code>build($concrete)</code> 函数会判断传的参数是 是<strong> 闭包 </strong>还是<strong> 具体类名 </strong>，如果是闭包则直接运行，如果是具体类名的话，则通过反射获取该类的构造函数所需的依赖，完成实例化。</p><p><strong>重点理解 下面这几个函数中 反射的用法，应该就很好理解了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">build($concrete)</span><br><span class="line">getDependencies(<span class="keyword">array</span> $dependencies)</span><br><span class="line">resolvedNonClass(ReflectionParameter $parameter)</span><br><span class="line">resolvedClass(ReflectionParameter $parameter)</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>IoC 理解起来是有点难度，可能文中描述让你感觉不是很清楚，可以将文中代码 在php中用debug观察 运行状态。<br>  理解了容器的具体实现原理，再去看Laravel中的相关实现，就会感觉豁然开朗。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
